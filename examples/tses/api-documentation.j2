# API Documentation Generation

Please generate comprehensive API documentation based on the provided specifications and examples. The documentation should be user-friendly, complete, and follow best practices for API documentation.

## API Overview

{% if api_info %}
**API Name**: {{ api_info.name or 'API' }}
**Version**: {{ api_info.version or 'Unknown' }}
**Base URL**: {{ api_info.base_url or 'Not specified' }}
{% if api_info.description %}
**Description**: {{ api_info.description }}
{% endif %}
{% endif %}

## Specifications

### OpenAPI Specification
{% if openapi_spec %}
{{ openapi_spec | appendix('openapi-spec', 'yaml', 'OpenAPI 3.0 Specification') }}
{% else %}
*No OpenAPI specification provided.*
{% endif %}

### Example Requests and Responses
{% if examples %}
{{ examples | appendix('api-examples', 'json', 'Example API Requests and Responses') }}
{% else %}
*No example requests/responses provided.*
{% endif %}

## Documentation Requirements

### 1. API Overview Section
Generate a comprehensive overview including:
- Purpose and scope of the API
- Target audience and use cases
- High-level architecture and design principles
- Supported data formats and protocols
- Rate limiting and usage policies

### 2. Authentication and Authorization
Document all authentication methods:
- **Authentication Types**: API keys, OAuth 2.0, JWT, etc.
- **Security Schemes**: How to obtain and use credentials
- **Authorization Scopes**: Available permissions and access levels
- **Security Best Practices**: Recommended security measures for API consumers

### 3. Endpoint Documentation
For each endpoint, provide:
- **Purpose**: What the endpoint does
- **HTTP Method and URL**: Complete endpoint specification
- **Parameters**: Path, query, header, and body parameters with types and validation rules
- **Request Examples**: Sample requests with realistic data
- **Response Examples**: Success and error responses with status codes
- **Error Handling**: Possible error conditions and response formats

### 4. Data Models and Schemas
Document all data structures:
- **Request Models**: Input data schemas with validation rules
- **Response Models**: Output data schemas with field descriptions
- **Enumerations**: Allowed values for enum fields
- **Relationships**: How different models relate to each other

### 5. Code Examples
Provide implementation examples in multiple languages:
- **cURL**: Command-line examples for testing
- **JavaScript/Node.js**: Frontend and backend examples
- **Python**: Using popular HTTP libraries
- **Additional Languages**: Based on target audience

### 6. Rate Limiting and Quotas
Document usage limits:
- **Rate Limits**: Requests per minute/hour/day
- **Quota Management**: How quotas are calculated and reset
- **Headers**: Rate limiting headers in responses
- **Best Practices**: How to handle rate limiting gracefully

### 7. Error Handling
Comprehensive error documentation:
- **Error Codes**: Complete list of possible error codes
- **Error Format**: Standard error response structure
- **Troubleshooting**: Common issues and solutions
- **Support**: How to get help with API issues

## Additional Resources

{% if postman_collection %}
### Postman Collection
{{ postman_collection | appendix('postman', 'json', 'Postman Collection') }}
{% endif %}

{% if sdk_examples %}
### SDK Examples
{{ sdk_examples | appendix('sdk-examples', 'text', 'SDK Usage Examples') }}
{% endif %}

{% if changelog %}
### API Changelog
{{ changelog | appendix('changelog', 'markdown', 'API Version History') }}
{% endif %}

## Documentation Style Guidelines

Please follow these guidelines when generating the documentation:

### Formatting
- Use clear, consistent headings and structure
- Include syntax highlighting for code examples
- Use tables for parameter documentation
- Provide interactive examples where possible

### Writing Style
- Use clear, concise language
- Avoid technical jargon when possible
- Provide context and explanations for complex concepts
- Include practical examples and use cases

### Organization
- Start with simple, common use cases
- Progress to more advanced scenarios
- Group related endpoints logically
- Provide cross-references between related sections

## Target Audience

{% if audience %}
**Primary Audience**: {{ audience.primary or 'Developers' }}
**Secondary Audience**: {{ audience.secondary or 'Technical decision makers' }}
**Experience Level**: {{ audience.experience or 'Intermediate' }}
{% else %}
**Primary Audience**: Software developers integrating with the API
**Experience Level**: Beginner to intermediate developers
{% endif %}

## Documentation Deliverables

Please generate:

1. **Getting Started Guide**
   - Quick start tutorial
   - Authentication setup
   - First API call example
   - Common use cases

2. **API Reference**
   - Complete endpoint documentation
   - Parameter specifications
   - Response schemas
   - Error codes

3. **Integration Guide**
   - Step-by-step integration instructions
   - Best practices and patterns
   - Performance optimization tips
   - Security considerations

4. **Code Examples**
   - Working code samples
   - Complete application examples
   - Error handling patterns
   - Testing strategies

5. **Troubleshooting Guide**
   - Common issues and solutions
   - Debugging techniques
   - Support resources
   - FAQ section

## Quality Standards

Ensure the documentation meets these standards:

- **Accuracy**: All information is correct and up-to-date
- **Completeness**: All endpoints and features are documented
- **Clarity**: Information is easy to understand and follow
- **Consistency**: Formatting and style are uniform throughout
- **Usability**: Developers can quickly find what they need

## Special Considerations

{% if special_requirements %}
{% for requirement in special_requirements %}
- **{{ requirement.name }}**: {{ requirement.description }}
{% endfor %}
{% endif %}

{% if compliance_notes %}
### Compliance Notes
{{ compliance_notes | appendix('compliance', 'text', 'Compliance and Legal Requirements') }}
{% endif %}

---

*The generated documentation should be professional, comprehensive, and developer-friendly, enabling quick and successful API integration.*
