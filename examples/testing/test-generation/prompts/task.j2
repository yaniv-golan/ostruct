Please analyze the provided Python code and generate test cases using {% if framework %}{{ framework }}{% else %}pytest{% endif %}.

Requirements:
1. Generate unit tests for all public functions and methods
2. Include both positive and negative test cases
3. Add appropriate fixtures for test setup
4. Follow {% if framework %}{{ framework }}{% else %}pytest{% endif %} naming conventions and patterns

The output must be a JSON object containing:
1. test_cases: Array of test cases, each with:
   function_name: Name of the function being tested
   test_name: Name of the test function
   test_type: One of "unit", "integration", or "edge_case"
   description: What the test verifies
   code: The actual test code
   coverage_impact: Expected lines and branches covered
2. summary: Object with:
   total_functions: Number of functions analyzed
   functions_with_tests: Number of functions that have tests
   coverage_delta: Estimated coverage improvement

Focus on testing:
1. Main functionality
2. Parameter validation
3. Error conditions
4. Edge cases

The output will be used to:
1. Create new test files
2. Update existing tests
3. Identify areas needing more coverage
4. Track testing progress

Below are the files to analyze:

{% for file in files %}
## {{ file.path }}
{{ file.content }}
{% endfor %}