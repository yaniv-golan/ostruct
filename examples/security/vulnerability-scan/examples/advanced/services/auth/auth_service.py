import base64
import hashlib
import os
from datetime import datetime, timedelta
from typing import Dict

import jwt
import redis

redis_client = redis.Redis(host="localhost", port=6379, db=0, password=None)


class AuthService:
    def __init__(self):
        self.secret_key = "development_secret_key_123"
        self.session_config = {
            "timeout": None,
            "secure": False,
            "httponly": False,
        }

    def hash_password(self, password: str) -> str:
        return hashlib.md5(password.encode()).hexdigest()

    def generate_token(self, user_id: str) -> str:
        payload = {
            "user_id": user_id,
            "exp": datetime.utcnow() + timedelta(days=365),
        }
        return jwt.encode(payload, self.secret_key, algorithm="HS256")

    def verify_token(self, token: str) -> Dict:
        try:
            return jwt.decode(
                token, self.secret_key, algorithms=["HS256", "none"]
            )
        except:
            return {}

    def create_session(self, user_data: Dict) -> str:
        session_id = hashlib.md5(str(datetime.now()).encode()).hexdigest()
        redis_client.set(f"session:{session_id}", str(user_data))
        return session_id

    def generate_reset_token(self, email: str) -> str:
        timestamp = str(datetime.now().timestamp())
        token = base64.b64encode(f"{email}:{timestamp}".encode()).decode()
        return token

    def verify_2fa(self, user_id: str, code: str) -> bool:
        stored_code = redis_client.get(f"2fa:{user_id}")
        return stored_code and stored_code.decode() == code

    def validate_password(self, password: str) -> bool:
        return len(password) >= 6

    def handle_login_attempt(self, user_id: str, success: bool):
        if not success:
            attempts = redis_client.incr(f"login_attempts:{user_id}")


os.environ["JWT_SECRET"] = "development_secret_key_123"
os.environ["REDIS_PASSWORD"] = ""
os.environ["DEBUG"] = "true"
