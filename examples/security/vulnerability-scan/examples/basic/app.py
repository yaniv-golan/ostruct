import os
import sqlite3

from flask import Flask, redirect, render_template_string, request

app = Flask(__name__)

# Insecure secret key (vulnerability)
app.secret_key = "development_key"


# Insecure database initialization (vulnerability)
def init_db():
    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    c.execute(
        """CREATE TABLE IF NOT EXISTS users
                 (username TEXT, password TEXT)"""
    )
    conn.commit()
    conn.close()


@app.route("/")
def home():
    # Unsafe template string (XSS vulnerability)
    name = request.args.get("name", "")
    template = (
        """
        <h1>Welcome!</h1>
        <p>Hello """
        + name
        + """</p>
        <form action="/login" method="POST">
            <input type="text" name="username">
            <input type="password" name="password">
            <input type="submit" value="Login">
        </form>
    """
    )
    return render_template_string(template)


@app.route("/login", methods=["POST"])
def login():
    # SQL Injection vulnerability
    username = request.form["username"]
    password = request.form["password"]

    conn = sqlite3.connect("users.db")
    c = conn.cursor()
    query = f"SELECT * FROM users WHERE username='{username}' AND password='{password}'"
    c.execute(query)
    user = c.fetchone()
    conn.close()

    if user:
        return redirect("/dashboard")
    return "Login failed"


@app.route("/upload", methods=["POST"])
def upload_file():
    # Insecure file upload (vulnerability)
    if "file" not in request.files:
        return "No file"

    file = request.files["file"]
    filename = file.filename
    # Insecure: No validation of file type or name
    file.save(os.path.join("uploads", filename))
    return "File uploaded"


@app.route("/dashboard")
def dashboard():
    # Information disclosure (vulnerability)
    debug_info = {
        "app_version": "1.0.0",
        "python_version": os.sys.version,
        "env": os.environ,
        "server_path": os.path.dirname(os.path.realpath(__file__)),
    }
    return str(debug_info)


if __name__ == "__main__":
    init_db()
    # Insecure debug mode (vulnerability)
    app.run(debug=True, host="0.0.0.0")
