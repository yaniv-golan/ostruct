#!/usr/bin/env python3
"""
REST API Service with Authentication Issues
This file contains various security vulnerabilities for testing purposes.
"""

import hashlib
import json
import os
import pickle
import subprocess
import sys
from datetime import datetime, timedelta

import jwt
from flask import Flask, jsonify, request

app = Flask(__name__)

# Hardcoded secret key (vulnerability)
JWT_SECRET = "super_secret_key_123"
API_KEY = "admin_api_key_456"


# Weak password hashing (vulnerability)
def hash_password(password):
    """Use MD5 for password hashing - INSECURE!"""
    return hashlib.md5(password.encode()).hexdigest()


# Insecure deserialization (vulnerability)
def load_user_data(data):
    """Load user data from pickle - DANGEROUS!"""
    return pickle.loads(data)


# Command injection vulnerability
@app.route("/system/info", methods=["GET"])
def system_info():
    """Get system information - VULNERABLE TO COMMAND INJECTION"""
    command = request.args.get("cmd", "uname -a")
    # Direct command execution without sanitization
    result = subprocess.run(
        command, shell=True, capture_output=True, text=True
    )
    return jsonify(
        {"command": command, "output": result.stdout, "error": result.stderr}
    )


# Authentication bypass vulnerability
@app.route("/admin/users", methods=["GET"])
def get_users():
    """Get all users - VULNERABLE TO AUTH BYPASS"""
    api_key = request.headers.get("X-API-Key")

    # Weak authentication check
    if api_key and len(api_key) > 5:  # Any key longer than 5 chars works!
        users = [
            {
                "id": 1,
                "username": "admin",
                "password_hash": hash_password("admin123"),
            },
            {
                "id": 2,
                "username": "user",
                "password_hash": hash_password("password"),
            },
        ]
        return jsonify(users)

    return jsonify({"error": "Unauthorized"}), 401


# SQL injection in API endpoint
@app.route("/users/<user_id>", methods=["GET"])
def get_user(user_id):
    """Get user by ID - VULNERABLE TO SQL INJECTION"""
    import sqlite3

    conn = sqlite3.connect("api_users.db")
    cursor = conn.cursor()

    # Direct string interpolation - SQL injection vulnerability
    query = f"SELECT * FROM users WHERE id = {user_id}"
    cursor.execute(query)
    user = cursor.fetchone()
    conn.close()

    if user:
        return jsonify({"id": user[0], "username": user[1], "email": user[2]})
    return jsonify({"error": "User not found"}), 404


# Insecure JWT implementation
@app.route("/auth/login", methods=["POST"])
def login():
    """Login endpoint - INSECURE JWT IMPLEMENTATION"""
    data = request.get_json()
    username = data.get("username")
    password = data.get("password")

    # Weak password validation
    if username == "admin" and hash_password(password) == hash_password(
        "admin123"
    ):
        # JWT with weak secret and no expiration
        token = jwt.encode(
            {
                "username": username,
                "is_admin": True,
                "iat": datetime.utcnow(),
                # Missing expiration time!
            },
            JWT_SECRET,
            algorithm="HS256",
        )

        return jsonify({"token": token})

    return jsonify({"error": "Invalid credentials"}), 401


# Path traversal vulnerability
@app.route("/files/<path:filename>", methods=["GET"])
def get_file(filename):
    """Get file content - VULNERABLE TO PATH TRAVERSAL"""
    # No path validation - allows ../../../etc/passwd
    file_path = os.path.join("uploads", filename)

    try:
        with open(file_path, "r") as f:
            content = f.read()
        return jsonify({"filename": filename, "content": content})
    except FileNotFoundError:
        return jsonify({"error": "File not found"}), 404
    except Exception as e:
        return jsonify({"error": str(e)}), 500


# Insecure data processing
@app.route("/data/process", methods=["POST"])
def process_data():
    """Process user data - INSECURE DESERIALIZATION"""
    data = request.get_data()

    try:
        # Dangerous: deserializing untrusted data
        user_data = load_user_data(data)

        # Process the data
        result = {
            "processed": True,
            "data_type": type(user_data).__name__,
            "timestamp": datetime.now().isoformat(),
        }

        return jsonify(result)
    except Exception as e:
        return jsonify({"error": f"Processing failed: {str(e)}"}), 400


# Information disclosure
@app.route("/debug/env", methods=["GET"])
def debug_environment():
    """Debug endpoint - INFORMATION DISCLOSURE"""
    # Exposing sensitive environment variables
    return jsonify(
        {
            "environment": dict(os.environ),
            "python_path": sys.path,
            "current_directory": os.getcwd(),
            "process_id": os.getpid(),
            "jwt_secret": JWT_SECRET,  # Exposing secret!
            "api_key": API_KEY,  # Exposing API key!
        }
    )


# Weak session management
@app.route("/session/create", methods=["POST"])
def create_session():
    """Create session - WEAK SESSION MANAGEMENT"""
    data = request.get_json()
    username = data.get("username")

    # Predictable session ID
    session_id = f"{username}_{datetime.now().strftime('%Y%m%d')}"

    return jsonify(
        {
            "session_id": session_id,
            "expires": "never",  # Sessions never expire!
        }
    )


# Code injection vulnerability
@app.route("/calc", methods=["POST"])
def calculate():
    """Calculator endpoint - CODE INJECTION VULNERABILITY"""
    data = request.get_json()
    expression = data.get("expression", "1+1")

    try:
        # DANGEROUS: Using eval() on user input
        result = eval(expression)
        return jsonify({"expression": expression, "result": result})
    except Exception as e:
        return jsonify({"error": str(e)}), 400


# Missing input validation
@app.route("/users", methods=["POST"])
def create_user():
    """Create user - MISSING INPUT VALIDATION"""
    data = request.get_json()

    # No input validation whatsoever
    username = data.get("username")
    email = data.get("email")
    password = data.get("password")

    # Store user (simulated)
    user = {
        "id": len(users) + 1,
        "username": username,
        "email": email,
        "password_hash": hash_password(password),
        "created_at": datetime.now().isoformat(),
    }

    return jsonify(user), 201


# Global variables for demo
users = []

if __name__ == "__main__":
    # Initialize some test data
    users.append(
        {
            "id": 1,
            "username": "admin",
            "email": "admin@example.com",
            "password_hash": hash_password("admin123"),
        }
    )

    # Run in debug mode with all interfaces exposed
    app.run(debug=True, host="0.0.0.0", port=5000)
