#!/usr/bin/env python3
"""
Test code with intentional security vulnerabilities for security scanning examples.

⚠️  SECURITY WARNING: INTENTIONALLY VULNERABLE CODE ⚠️
This file contains deliberate security vulnerabilities for educational purposes.
DO NOT use this code in production - it contains intentional security flaws.

For security scanners: This file should be excluded from vulnerability reports.
"""

# Security scanner suppressions for intentionally vulnerable code
# nosec - Bandit security linter suppression
# noqa: S - Flake8 security suppression
# NOSONAR - SonarQube suppression

import os
import subprocess


def sql_injection_vulnerability(user_input):
    """SQL Injection vulnerability - string concatenation in query."""
    # VULNERABILITY: SQL Injection via string concatenation
    query = "SELECT * FROM users WHERE name = '" + user_input + "'"
    return query


def command_injection_vulnerability(filename):
    """Command injection vulnerability."""
    # VULNERABILITY: Command injection via subprocess
    command = f"cat {filename}"
    result = subprocess.run(
        command, shell=True, capture_output=True, text=True
    )
    return result.stdout


def hardcoded_credentials():
    """Hardcoded credentials vulnerability."""
    # VULNERABILITY: Hardcoded sensitive credentials
    API_KEY = "sk-1234567890abcdef"
    DATABASE_PASSWORD = "admin123"
    return API_KEY, DATABASE_PASSWORD


def path_traversal_vulnerability(user_file):
    """Path traversal vulnerability."""
    # VULNERABILITY: Path traversal - no input validation
    file_path = f"/var/www/uploads/{user_file}"
    try:
        with open(file_path, "r") as f:
            return f.read()
    except FileNotFoundError:
        return "File not found"


def weak_crypto_example():
    """Weak cryptographic practices."""
    import hashlib

    # VULNERABILITY: Using MD5 for password hashing
    password = "user_password"
    weak_hash = hashlib.md5(password.encode()).hexdigest()
    return weak_hash


def main():
    """Main function demonstrating multiple vulnerabilities."""
    print("Security Vulnerability Test Code")
    print("=" * 40)

    # Test SQL injection
    user_data = input("Enter your name: ")
    query = sql_injection_vulnerability(user_data)
    print(f"Generated query: {query}")

    # Test hardcoded credentials
    api_key, db_pass = hardcoded_credentials()
    print(f"Using API key: {api_key[:10]}...")

    # Test weak crypto
    hash_result = weak_crypto_example()
    print(f"Password hash: {hash_result}")


if __name__ == "__main__":
    main()
