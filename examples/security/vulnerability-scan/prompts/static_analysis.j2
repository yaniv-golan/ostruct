---
system_prompt: You are an expert security analyst performing comprehensive static code analysis.
---

# Static Security Vulnerability Analysis

## Files for Analysis
Analyze the security of: {{ file_ref("code") }}

## Analysis Instructions

Perform comprehensive static analysis focusing on:

1. **SQL Injection Vulnerabilities**
   - String concatenation in database queries
   - Format string vulnerabilities in SQL
   - Unparameterized queries

2. **Cross-Site Scripting (XSS) Issues**
   - Unescaped output in web contexts
   - Direct rendering of user input
   - Unsafe template rendering

3. **Authentication and Authorization Flaws**
   - Missing authentication checks
   - Weak password policies
   - Session management issues
   - Privilege escalation vulnerabilities

4. **Input Validation Problems**
   - Missing input sanitization
   - Insufficient data validation
   - Path traversal vulnerabilities
   - Buffer overflow potential

5. **Cryptographic Weaknesses**
   - Hardcoded passwords, API keys, or secrets
   - Weak cryptographic algorithms (MD5, SHA1 for passwords)
   - Plain text password storage
   - Missing password hashing or weak hashing

6. **Configuration Security Issues**
   - Insecure default configurations
   - Debug mode enabled in production
   - Exposed sensitive information

## Output Requirements

For each vulnerability found, provide:

- **Specific line numbers and code snippets**
- **Risk assessment** (Critical/High/Medium/Low)
- **Detailed exploitation scenarios**
- **Specific remediation steps with example code**

Present your findings in the specified JSON schema format with comprehensive details for each vulnerability discovered.

## Analysis Focus

This static analysis approach provides:
- ✅ **Cost-effective** security scanning
- ✅ **No code execution** - safe for any codebase
- ✅ **Comprehensive coverage** of common vulnerability patterns
- ✅ **Actionable recommendations** for immediate fixes

Focus on practical, exploitable vulnerabilities with clear remediation paths.
