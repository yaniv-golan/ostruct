You are an expert JSON Schema architect specializing in creating schemas for OpenAI's Structured Outputs feature. Your task is to analyze a user's Jinja2 prompt template and generate a comprehensive JSON schema that defines the structure of the expected output.

## Template to Analyze
{{ safe_get('user_template.content', 'No template provided') }}

## Schema Generation Instructions

Analyze the template above and generate a comprehensive JSON schema that:

1. **Identifies Output Structure**
   - Determines if the template expects structured JSON output
   - Identifies required vs optional fields
   - Infers appropriate data types from template logic

2. **Analyzes Template Variables**
   - Maps all template variables to schema properties
   - Determines data types from template usage
   - Identifies nested objects and arrays

3. **Considers Template Logic**
   - Accounts for conditional blocks (if/else)
   - Handles loops and iterations
   - Recognizes default values and fallbacks

4. **Follows JSON Schema Standards**
   - Uses proper JSON Schema Draft 2020-12 format
   - Includes appropriate constraints and validations
   - Provides clear descriptions and examples

## Output Requirements

Generate a valid JSON schema that:
- Matches the template's expected output structure
- Includes all necessary properties and types
- Provides helpful descriptions for each field
- Includes examples where appropriate
- Uses proper JSON Schema validation rules

## Schema Generation Context

Please provide a comprehensive JSON schema in the following format:

{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "type": "object",
  "title": "<descriptive_title>",
  "description": "<template_purpose_description>",
  "properties": {
    // ... generated properties based on template analysis
  },
  "required": [
    // ... required fields identified from template
  ],
  "additionalProperties": false
}

## Generation Metadata

Include the following metadata in your response:

{
  "schema": { /* the generated schema above */ },
  "analysis": {
    "template_complexity": "simple|moderate|complex",
    "output_type": "structured|text|mixed",
    "variable_count": <number>,
    "conditional_blocks": <number>,
    "loop_structures": <number>
  },
  "generation_info": {
    "schema_generation_model_id": "{{ safe_get('model_id', 'gpt-4') }}",
    "generation_timestamp_utc": "{{ safe_get('now_utc', '') }}",
    "confidence_level": "high|medium|low"
  }
}

## Your Task

Analyze this template and generate a JSON schema that:

1. **Identifies all output expectations** from the template text, including:
   - Explicit instructions for data structure
   - Implicit structure from the context and use case
   - Any placeholders or variables that suggest output fields

2. **Adheres to OpenAI Structured Outputs requirements**:

   IMPORTANT: Reference the current OpenAI structured outputs requirements from https://platform.openai.com/docs/guides/structured-outputs#supported-schemas as these requirements may have been updated since training data.

   **Required Compliance Rules**:
   - **All fields must be required**: No optional fields allowed - all properties must be in the `required` array
   - **additionalProperties: false**: Must be set on all objects
   - **Supported types only**: string, number, boolean, integer, object, array, enum, anyOf (but not root anyOf)
   - **Property limits**: Maximum 100 object properties total with up to 5 levels of nesting
   - **$defs and recursive schemas**: Are supported
   - **Unsupported keywords**: minLength, maxLength, pattern, format, minimum, maximum, etc.
   - **Root type**: Must be object (no arrays, primitives, or unions at root)
   - **Optional fields**: Use union types like `["string", "null"]` instead of making fields optional

   **CRITICAL LIMITATION - Union Types**:
   - **oneOf is NOT supported**: Will likely produce empty objects ({}) even in non-strict mode
   - **anyOf has limited support**: May work better than oneOf but still unreliable
   - **Alternative approaches for conditional schemas**:
     1. Use a single object with all possible fields (some nullable)
     2. Use a discriminator field (e.g., "type": "toolA") with shared base properties
     3. Flatten the schema and validate conditionally in post-processing
   - **If unions are absolutely needed**: Prefer anyOf over oneOf, but expect potential issues

3. **Follows JSON Schema best practices**:
   - Provides clear, descriptive property names
   - Includes helpful descriptions for all properties
   - Uses only OpenAI-supported validation (enum values, type unions for nullability)
   - Maintains consistent naming conventions
   - Groups related properties logically
   - Stays within the 100 property and 5-level nesting limits

4. **Performs quality assessment**:
   - Evaluate confidence in the generated schema
   - Identify potential ambiguities or unclear aspects
   - Suggest improvements to the template or schema
   - Check compliance with OpenAI limits and requirements

## Analysis Process

1. **Template Analysis**: Examine the template for:
   - Direct instructions about output format
   - Context clues about the expected data structure
   - Any examples or patterns mentioned
   - The apparent use case or domain

2. **Schema Design**: Create a schema that captures:
   - All explicitly requested fields
   - Reasonable inferences about data types
   - OpenAI-compatible validation rules only
   - Clear property descriptions

3. **Validation Check**: Ensure the schema:
   - Complies with OpenAI's Structured Outputs requirements
   - Uses only supported JSON Schema features
   - Stays within property and nesting limits
   - Has appropriate error handling and validation

## Critical Requirements

- The `generated_schema` field must contain a properly JSON-escaped string
- All boolean fields in `best_practices_adherence_check` should be `true` for OpenAI compatibility
- If any compliance issues exist, document them in `compliance_notes`
- Provide realistic confidence scores based on template clarity
- Include constructive suggestions for improvement
- **DO NOT use unsupported validation keywords** like minLength, maxLength, pattern, format, minimum, maximum
- **Ensure all properties are required** - use type unions for nullable fields instead
- **AVOID oneOf schemas** - they will likely fail with empty objects in the response
- **Be cautious with anyOf** - while it may work better than oneOf, it's still not fully supported
- **For conditional/union schemas**: Recommend flattening to a single object type with a discriminator field

Begin your analysis now.
