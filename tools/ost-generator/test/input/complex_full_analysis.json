{
  "template_analysis": {
    "variables": [
      {
        "name": "config",
        "type": "file",
        "usage_context": [
          "conditional",
          "substitution",
          "file_access"
        ],
        "is_required": false,
        "default_value": null,
        "file_attributes": [
          "name",
          "content"
        ]
      },
      {
        "name": "documents",
        "type": "directory",
        "usage_context": [
          "loop"
        ],
        "is_required": true,
        "default_value": null,
        "file_attributes": null
      },
      {
        "name": "doc",
        "type": "complex",
        "usage_context": [
          "loop variable",
          "substitution",
          "file_access",
          "conditional"
        ],
        "is_required": true,
        "default_value": null,
        "file_attributes": [
          "name",
          "size",
          "content"
        ]
      },
      {
        "name": "analysis_mode",
        "type": "scalar",
        "usage_context": [
          "substitution",
          "filter"
        ],
        "is_required": false,
        "default_value": "standard",
        "file_attributes": null
      },
      {
        "name": "include_metadata",
        "type": "boolean",
        "usage_context": [
          "substitution"
        ],
        "is_required": true,
        "default_value": null,
        "file_attributes": null
      },
      {
        "name": "output_format",
        "type": "scalar",
        "usage_context": [
          "substitution"
        ],
        "is_required": true,
        "default_value": null,
        "file_attributes": null
      },
      {
        "name": "enable_search",
        "type": "boolean",
        "usage_context": [
          "conditional"
        ],
        "is_required": false,
        "default_value": null,
        "file_attributes": null
      },
      {
        "name": "search_query",
        "type": "scalar",
        "usage_context": [
          "substitution"
        ],
        "is_required": false,
        "default_value": null,
        "file_attributes": null
      },
      {
        "name": "processing_instructions",
        "type": "list",
        "usage_context": [
          "loop"
        ],
        "is_required": true,
        "default_value": null,
        "file_attributes": null
      },
      {
        "name": "instruction",
        "type": "scalar",
        "usage_context": [
          "loop variable",
          "substitution"
        ],
        "is_required": true,
        "default_value": null,
        "file_attributes": null
      }
    ],
    "file_patterns": [
      {
        "pattern_type": "single_file",
        "variable_name": "config",
        "routing_hint": "template",
        "attributes_used": [
          "name",
          "content"
        ]
      },
      {
        "pattern_type": "directory",
        "variable_name": "documents",
        "routing_hint": "auto",
        "attributes_used": null
      },
      {
        "pattern_type": "file_reference",
        "variable_name": "doc",
        "routing_hint": "auto",
        "attributes_used": [
          "name",
          "size",
          "content"
        ]
      }
    ],
    "tool_hints": [
      {
        "tool": "user-data",
        "confidence": 0.9,
        "evidence": "Document iteration, reference to .pdf for vision analysis, and document content access."
      },
      {
        "tool": "file-search",
        "confidence": 0.7,
        "evidence": "Conditional search integration and web search query usage."
      },
      {
        "tool": "code-interpreter",
        "confidence": 0.4,
        "evidence": "Presence of file size and mention of analysis, but no explicit computations."
      },
      {
        "tool": "web-search",
        "confidence": 0.7,
        "evidence": "Conditional block for performing web search for a search query."
      }
    ],
    "complexity_score": 0.8,
    "template_structure": {
      "has_conditionals": true,
      "has_loops": true,
      "has_file_references": true,
      "has_filters": true,
      "line_count": 44
    }
  },
  "variable_classification": {
    "classified_variables": [
      {
        "name": "config",
        "type": "file",
        "subtype": "file_path",
        "confidence": 0.95,
        "usage_context": [
          "conditional",
          "substitution",
          "file_access",
          "configuration"
        ],
        "cli_suggestion": {
          "flag": "--config",
          "short_flag": "-c",
          "argument_type": "single_value",
          "required": false,
          "default_value": null
        },
        "validation_hints": {
          "format": "file_path",
          "pattern": null,
          "constraints": [
            "Must be a valid file path",
            "File must exist"
          ]
        },
        "examples": [
          "configs/settings.yaml",
          "config.json"
        ]
      },
      {
        "name": "documents",
        "type": "directory",
        "subtype": "directory_path",
        "confidence": 0.95,
        "usage_context": [
          "loop",
          "file_path"
        ],
        "cli_suggestion": {
          "flag": "--documents",
          "short_flag": "-d",
          "argument_type": "single_value",
          "required": true,
          "default_value": null
        },
        "validation_hints": {
          "format": "directory_path",
          "pattern": null,
          "constraints": [
            "Must be a valid directory path",
            "Directory must exist and be readable"
          ]
        },
        "examples": [
          "./docs",
          "/data/mydocuments/"
        ]
      },
      {
        "name": "doc",
        "type": "json",
        "subtype": "object",
        "confidence": 0.9,
        "usage_context": [
          "loop variable",
          "substitution",
          "file_access",
          "conditional"
        ],
        "cli_suggestion": {
          "flag": "internal",
          "short_flag": null,
          "argument_type": "not_exposed",
          "required": false,
          "default_value": null
        },
        "validation_hints": {
          "format": null,
          "pattern": null,
          "constraints": [
            "Populated internally from documents directory"
          ]
        },
        "examples": [
          "{'name': 'file1.pdf', 'size': 12345, 'content': '<bytes>'}"
        ]
      },
      {
        "name": "analysis_mode",
        "type": "scalar",
        "subtype": "string",
        "confidence": 0.9,
        "usage_context": [
          "substitution",
          "filter",
          "configuration"
        ],
        "cli_suggestion": {
          "flag": "--analysis-mode",
          "short_flag": "-m",
          "argument_type": "single_value",
          "required": false,
          "default_value": "standard"
        },
        "validation_hints": {
          "format": null,
          "pattern": "^[a-zA-Z0-9_-]+$",
          "constraints": [
            "Must be a valid mode string"
          ]
        },
        "examples": [
          "standard",
          "deep",
          "fast"
        ]
      },
      {
        "name": "include_metadata",
        "type": "boolean",
        "subtype": null,
        "confidence": 0.95,
        "usage_context": [
          "substitution",
          "configuration"
        ],
        "cli_suggestion": {
          "flag": "--include-metadata",
          "short_flag": null,
          "argument_type": "flag",
          "required": true,
          "default_value": null
        },
        "validation_hints": {
          "format": null,
          "pattern": null,
          "constraints": [
            "Boolean flag"
          ]
        },
        "examples": [
          ""
        ]
      },
      {
        "name": "output_format",
        "type": "scalar",
        "subtype": "string",
        "confidence": 0.9,
        "usage_context": [
          "substitution",
          "output_formatting"
        ],
        "cli_suggestion": {
          "flag": "--output-format",
          "short_flag": "-o",
          "argument_type": "single_value",
          "required": true,
          "default_value": null
        },
        "validation_hints": {
          "format": null,
          "pattern": "^(json|csv|txt|pdf)$",
          "constraints": [
            "Must be one of: json, csv, txt, pdf"
          ]
        },
        "examples": [
          "json",
          "csv"
        ]
      },
      {
        "name": "enable_search",
        "type": "boolean",
        "subtype": null,
        "confidence": 0.9,
        "usage_context": [
          "conditional",
          "configuration"
        ],
        "cli_suggestion": {
          "flag": "--enable-search",
          "short_flag": null,
          "argument_type": "flag",
          "required": false,
          "default_value": null
        },
        "validation_hints": {
          "format": null,
          "pattern": null,
          "constraints": [
            "Boolean flag"
          ]
        },
        "examples": [
          ""
        ]
      },
      {
        "name": "search_query",
        "type": "scalar",
        "subtype": "string",
        "confidence": 0.85,
        "usage_context": [
          "substitution",
          "configuration"
        ],
        "cli_suggestion": {
          "flag": "--search-query",
          "short_flag": "-q",
          "argument_type": "single_value",
          "required": false,
          "default_value": null
        },
        "validation_hints": {
          "format": null,
          "pattern": null,
          "constraints": [
            "Should be a valid search query string, can be empty if --enable-search is not used"
          ]
        },
        "examples": [
          "example term",
          "project report"
        ]
      },
      {
        "name": "processing_instructions",
        "type": "list",
        "subtype": "string_array",
        "confidence": 0.9,
        "usage_context": [
          "loop",
          "data_processing"
        ],
        "cli_suggestion": {
          "flag": "--processing-instruction",
          "short_flag": "-p",
          "argument_type": "multiple_values",
          "required": true,
          "default_value": null
        },
        "validation_hints": {
          "format": null,
          "pattern": null,
          "constraints": [
            "At least one instruction must be provided"
          ]
        },
        "examples": [
          "ocr",
          "summarize",
          "classify"
        ]
      },
      {
        "name": "instruction",
        "type": "scalar",
        "subtype": "string",
        "confidence": 0.85,
        "usage_context": [
          "loop variable",
          "substitution",
          "data_processing"
        ],
        "cli_suggestion": {
          "flag": "internal",
          "short_flag": null,
          "argument_type": "not_exposed",
          "required": false,
          "default_value": null
        },
        "validation_hints": {
          "format": null,
          "pattern": null,
          "constraints": [
            "Populated internally from processing_instructions list"
          ]
        },
        "examples": [
          "ocr",
          "summarize"
        ]
      }
    ],
    "classification_summary": {
      "total_variables": 10,
      "type_distribution": {
        "scalar": 4,
        "boolean": 2,
        "file": 1,
        "directory": 1,
        "list": 1,
        "json": 1,
        "unknown": 0
      },
      "complexity_indicators": {
        "has_file_operations": true,
        "has_complex_data_structures": true,
        "has_conditional_logic": true,
        "requires_validation": true
      }
    }
  },
  "schema_analysis": {
    "schema_structure": {
      "root_type": "object",
      "required_fields": [
        "document_summaries",
        "common_themes",
        "recommendations",
        "analysis_mode",
        "metadata_included"
      ],
      "optional_fields": [],
      "nested_objects": [
        {
          "path": "$.document_summaries[*]",
          "type": "object",
          "required": true
        },
        {
          "path": "$.document_summaries[*].key_points",
          "type": "array",
          "required": true
        }
      ]
    },
    "field_analysis": [
      {
        "field_name": "document_summaries",
        "field_path": "$.document_summaries",
        "type": "array",
        "format": null,
        "required": true,
        "constraints": null,
        "description": "Summary of each analyzed document",
        "examples": null
      },
      {
        "field_name": "document_name",
        "field_path": "$.document_summaries[*].document_name",
        "type": "string",
        "format": null,
        "required": true,
        "constraints": null,
        "description": null,
        "examples": null
      },
      {
        "field_name": "summary",
        "field_path": "$.document_summaries[*].summary",
        "type": "string",
        "format": null,
        "required": true,
        "constraints": null,
        "description": null,
        "examples": null
      },
      {
        "field_name": "key_points",
        "field_path": "$.document_summaries[*].key_points",
        "type": "array",
        "format": null,
        "required": true,
        "constraints": null,
        "description": null,
        "examples": null
      },
      {
        "field_name": "key_points_item",
        "field_path": "$.document_summaries[*].key_points[*]",
        "type": "string",
        "format": null,
        "required": true,
        "constraints": null,
        "description": null,
        "examples": null
      },
      {
        "field_name": "common_themes",
        "field_path": "$.common_themes",
        "type": "array",
        "format": null,
        "required": true,
        "constraints": null,
        "description": "Common themes across all documents",
        "examples": null
      },
      {
        "field_name": "common_themes_item",
        "field_path": "$.common_themes[*]",
        "type": "string",
        "format": null,
        "required": true,
        "constraints": null,
        "description": null,
        "examples": null
      },
      {
        "field_name": "recommendations",
        "field_path": "$.recommendations",
        "type": "array",
        "format": null,
        "required": true,
        "constraints": null,
        "description": "Recommendations based on analysis",
        "examples": null
      },
      {
        "field_name": "recommendations_item",
        "field_path": "$.recommendations[*]",
        "type": "string",
        "format": null,
        "required": true,
        "constraints": null,
        "description": null,
        "examples": null
      },
      {
        "field_name": "analysis_mode",
        "field_path": "$.analysis_mode",
        "type": "string",
        "format": null,
        "required": true,
        "constraints": null,
        "description": "Analysis mode used",
        "examples": null
      },
      {
        "field_name": "metadata_included",
        "field_path": "$.metadata_included",
        "type": "boolean",
        "format": null,
        "required": true,
        "constraints": null,
        "description": "Whether metadata was included",
        "examples": null
      }
    ],
    "validation_rules": {
      "has_strict_types": true,
      "has_format_constraints": false,
      "has_length_constraints": false,
      "has_value_constraints": false,
      "has_pattern_constraints": false,
      "has_enum_constraints": false,
      "complexity_score": 0.35
    },
    "output_guidance": {
      "structured_output": true,
      "validation_level": "strict",
      "suggested_tools": [
        "Code Interpreter"
      ],
      "output_format_hints": [
        "Output should be structured, strictly conforming to the provided JSON schema.",
        "All root fields MUST be present.",
        "Arrays may be empty or populated; their items must match the specified sub-schema.",
        "No format or enumerated value restrictions present, so free-form strings are allowed for relevant fields."
      ]
    }
  },
  "pattern_detection": {
    "file_patterns": {
      "file_attachments": [
        {
          "variable_name": "config",
          "attachment_type": "single_file",
          "routing_target": "template",
          "file_types": [
            "yaml",
            "json"
          ],
          "confidence": 0.95,
          "evidence": [
            "Type 'file' with 'file_path' subtype",
            "Named 'config', used in configuration, substitution, file_access",
            "CLI guidance suggests --config flag",
            "Validation: file must exist, be a valid file path"
          ]
        },
        {
          "variable_name": "doc",
          "attachment_type": "file_collection",
          "routing_target": "code_interpreter",
          "file_types": [
            "pdf"
          ],
          "confidence": 0.9,
          "evidence": [
            "Type 'json' object representing a file in loop",
            "Read from 'documents' directory",
            "Attributes: name, size, content",
            "Used for file_access, substitution, conditional"
          ]
        }
      ],
      "directory_operations": [
        {
          "variable_name": "documents",
          "operation_type": "directory_iteration",
          "suggested_flags": [
            "--documents",
            "-d"
          ],
          "confidence": 0.95
        }
      ]
    },
    "tool_hints": {
      "code_interpreter": {
        "suggested": true,
        "confidence": 0.8,
        "reasons": [
          "Analysis and transformation of document content",
          "Possible extraction and aggregation of key points, summaries",
          "Structured output requirements (JSON schema)",
          "Schema guidance suggests Code Interpreter"
        ],
        "use_cases": [
          "Parsing document content",
          "Aggregating text data for summary/key points",
          "Format conversions (output_format: json, csv, txt, pdf)",
          "Document batch processing"
        ]
      },
      "file_search": {
        "suggested": true,
        "confidence": 0.7,
        "reasons": [
          "documents directory processed in loop",
          "search_query and enable_search options",
          "Tool hints and variable classification highlight search functionality"
        ],
        "document_types": [
          "pdf",
          "txt"
        ]
      },
      "web_search": {
        "suggested": true,
        "confidence": 0.7,
        "reasons": [
          "Presence of search_query and enable_search for conditional web lookup",
          "Template tool hints include web-search at 0.7 confidence"
        ],
        "search_contexts": [
          "When search_query is present",
          "When enable_search is set"
        ]
      }
    },
    "security_patterns": {
      "input_validation": {
        "required": true,
        "validation_types": [
          "file_path_validation",
          "directory_path_validation",
          "enumeration (for output_format)",
          "string sanitization (for analysis_mode, search_query)"
        ],
        "risk_level": "medium",
        "evidence": [
          "config and documents require valid file/directory path validation",
          "output_format uses enumerated values for strictness",
          "search_query is a free-form string that may be used in queries or web search",
          "User input drives file access and search filtering"
        ]
      },
      "file_safety": {
        "file_access_patterns": [
          "Reading config file",
          "Iterating and processing multiple files in a directory",
          "Accessing file content for analysis/summarization"
        ],
        "safety_recommendations": [
          "Ensure config path and documents directory are validated for existence and access",
          "Use file type restrictions for document processing (e.g., only allow PDFs, txt files)",
          "Implement input sanitation for search queries to avoid code injection",
          "Restrict file access root, prevent directory traversal",
          "Handle large files with memory and resource limits"
        ],
        "restricted_operations": [
          "Arbitrary file system access",
          "Execution of code from untrusted files"
        ]
      }
    },
    "integration_patterns": {
      "mcp_servers": [
        {
          "server_type": "document_processing_server",
          "use_case": "Batch-level document parsing, OCR, or summarization across multiple files in directory",
          "confidence": 0.7
        }
      ],
      "external_apis": [
        {
          "api_type": "web_search_api",
          "purpose": "Supporting search_query and enable_search conditional logic; external information retrieval",
          "confidence": 0.7
        }
      ]
    },
    "pattern_summary": {
      "complexity_score": 0.8,
      "primary_patterns": [
        "Multi-document batch processing via directories",
        "Configurable file and output formats",
        "Structured output generation matching complex JSON schema (summaries, recommendations)",
        "Conditional and loop-driven logic with user-controllable options"
      ],
      "recommended_features": [
        "CLI flags for config, documents, analysis_mode, output_format, etc.",
        "Batch directory processing with safety checks",
        "Flexible output format selection (json, csv, txt, pdf)",
        "Integrated file and (optionally) web search functions triggered by user input",
        "Strict schema-driven output validation",
        "Input validation for all file and directory paths",
        "Safe file processing (whitelist file types, sandbox directory access)"
      ],
      "implementation_notes": [
        "Implement robust input validation and file access checks for config and documents paths.",
        "Support batch iteration over documents with error handling for unreadable or invalid files.",
        "Restrict file processing to supported file types (suggested: PDF, TXT).",
        "Enable search features only when enable_search is true; sanitize all search_query input.",
        "Enforce output to strictly follow the expected JSON schema with all required fields.",
        "If integrating web search, use an external API or MCP server and handle failures gracefully.",
        "Provide comprehensive CLI with clear flags, help text, and required/optional designations."
      ]
    }
  },
  "cli_specification": {
    "cli_specification": {
      "tool_name": "document-batch-analyzer",
      "description": "A command-line tool for analyzing and summarizing collections of documents in batch mode, with configurable processing instructions, metadata inclusion, search capabilities, and flexible output formats. Supports safe file and directory operations, structured output conforming to a strict schema, and integration with code interpreter, file search, and web search features.",
      "version": "1.0.0",
      "arguments": [
        {
          "variable_name": "config",
          "cli_flag": "--config",
          "short_flag": "-c",
          "argument_type": "single_value",
          "required": false,
          "default_value": null,
          "help_text": "Path to configuration file (YAML or JSON). Used for custom settings and processing instructions.",
          "validation": {
            "type": "file_path",
            "allowed_values": null,
            "pattern": null,
            "min_length": null,
            "max_length": null,
            "file_extensions": [
              ".yaml",
              ".yml",
              ".json"
            ]
          },
          "file_routing": {
            "target": "template",
            "alias": "config",
            "multiple": false
          },
          "examples": [
            "configs/settings.yaml",
            "config.json"
          ]
        },
        {
          "variable_name": "documents",
          "cli_flag": "--documents",
          "short_flag": "-d",
          "argument_type": "single_value",
          "required": true,
          "default_value": null,
          "help_text": "Path to a directory containing documents (PDF or TXT) to process in batch.",
          "validation": {
            "type": "directory_path",
            "allowed_values": null,
            "pattern": null,
            "min_length": null,
            "max_length": null,
            "file_extensions": null
          },
          "file_routing": {
            "target": "code_interpreter",
            "alias": "documents",
            "multiple": false
          },
          "examples": [
            "./docs",
            "/data/mydocuments/"
          ]
        },
        {
          "variable_name": "analysis_mode",
          "cli_flag": "--analysis-mode",
          "short_flag": "-m",
          "argument_type": "single_value",
          "required": false,
          "default_value": "standard",
          "help_text": "Analysis mode to use (e.g., 'standard', 'deep', 'fast').",
          "validation": {
            "type": "string",
            "allowed_values": null,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "min_length": null,
            "max_length": null,
            "file_extensions": null
          },
          "file_routing": null,
          "examples": [
            "standard",
            "deep"
          ]
        },
        {
          "variable_name": "include_metadata",
          "cli_flag": "--include-metadata",
          "short_flag": null,
          "argument_type": "flag",
          "required": true,
          "default_value": null,
          "help_text": "Include document metadata in the analysis and output.",
          "validation": {
            "type": "boolean",
            "allowed_values": null,
            "pattern": null,
            "min_length": null,
            "max_length": null,
            "file_extensions": null
          },
          "file_routing": null,
          "examples": [
            ""
          ]
        },
        {
          "variable_name": "output_format",
          "cli_flag": "--output-format",
          "short_flag": "-o",
          "argument_type": "single_value",
          "required": true,
          "default_value": null,
          "help_text": "Output format for analysis results: json, csv, txt, or pdf. Default is json.",
          "validation": {
            "type": "string",
            "allowed_values": [
              "json",
              "csv",
              "txt",
              "pdf"
            ],
            "pattern": "^(json|csv|txt|pdf)$",
            "min_length": null,
            "max_length": null,
            "file_extensions": null
          },
          "file_routing": null,
          "examples": [
            "json"
          ]
        },
        {
          "variable_name": "enable_search",
          "cli_flag": "--enable-search",
          "short_flag": null,
          "argument_type": "flag",
          "required": false,
          "default_value": null,
          "help_text": "Enable integrated search (file or web) for relevant queries and content extraction.",
          "validation": {
            "type": "boolean",
            "allowed_values": null,
            "pattern": null,
            "min_length": null,
            "max_length": null,
            "file_extensions": null
          },
          "file_routing": null,
          "examples": [
            ""
          ]
        },
        {
          "variable_name": "search_query",
          "cli_flag": "--search-query",
          "short_flag": "-q",
          "argument_type": "single_value",
          "required": false,
          "default_value": null,
          "help_text": "Search query for filtering documents or performing an external web search (requires --enable-search).",
          "validation": {
            "type": "string",
            "allowed_values": null,
            "pattern": null,
            "min_length": null,
            "max_length": 256,
            "file_extensions": null
          },
          "file_routing": null,
          "examples": [
            "financial summary",
            "project report"
          ]
        },
        {
          "variable_name": "processing_instructions",
          "cli_flag": "--processing-instruction",
          "short_flag": "-p",
          "argument_type": "multiple_values",
          "required": true,
          "default_value": null,
          "help_text": "Processing instructions to apply to each document (e.g., ocr, summarize, classify). Use multiple times for multiple instructions.",
          "validation": {
            "type": "string_array",
            "allowed_values": null,
            "pattern": null,
            "min_length": 1,
            "max_length": null,
            "file_extensions": null
          },
          "file_routing": null,
          "examples": [
            "ocr",
            "summarize"
          ]
        }
      ],
      "file_attachments": [
        {
          "flag": "--config",
          "routing_target": "template",
          "alias": "config",
          "file_types": [
            "yaml",
            "json"
          ],
          "required": false,
          "multiple": false,
          "help_text": "Optional configuration file (YAML or JSON)."
        },
        {
          "flag": "--documents",
          "routing_target": "code_interpreter",
          "alias": "documents",
          "file_types": [
            "pdf",
            "txt"
          ],
          "required": true,
          "multiple": true,
          "help_text": "Directory containing document files (PDF or TXT) to analyze."
        }
      ],
      "tool_integrations": {
        "enable_code_interpreter": true,
        "enable_file_search": true,
        "enable_web_search": true,
        "suggested_mcp_servers": [
          "document_processing_server"
        ]
      }
    },
    "usage_examples": [
      {
        "description": "Basic usage with required options and output as JSON.",
        "command": "document-batch-analyzer --documents ./docs --include-metadata --output-format json --processing-instruction summarize",
        "explanation": "Processes all supported documents in './docs', includes metadata, performs summarization, and outputs the result as JSON."
      },
      {
        "description": "Using a configuration file and specifying analysis mode and multiple instructions.",
        "command": "document-batch-analyzer --config config.yaml --documents ./mydocs/ --analysis-mode deep --include-metadata --output-format csv -p ocr -p summarize",
        "explanation": "Loads settings from config.yaml, uses deep analysis, includes metadata, applies both OCR and summarization, and outputs as CSV."
      },
      {
        "description": "Enabling search and specifying a search query for filtering.",
        "command": "document-batch-analyzer --documents ./docs/ --include-metadata --output-format txt --enable-search --search-query \"climate change\" --processing-instruction summarize",
        "explanation": "Processes documents in './docs', includes metadata, uses search to filter for 'climate change', summarizes matching documents, and outputs as TXT."
      },
      {
        "description": "Batch conversion to PDF with multiple instructions and search enabled.",
        "command": "document-batch-analyzer -d ./docs/ --include-metadata -o pdf --enable-search -p summarize -p classify",
        "explanation": "Processes every document in './docs', includes metadata, enables search, summarizes and classifies each, and saves output as PDF."
      }
    ],
    "implementation_notes": {
      "complexity_assessment": "High complexity due to batch file processing, conditional feature activation, structured output, and multi-tool integration. Careful validation, modular design, and robust error handling are required.",
      "security_considerations": [
        "Validate and sanitize all file/directory paths, restrict to allowed root or directory.",
        "Only process whitelisted file types (PDF, TXT).",
        "Sanitize all user input, especially search queries, to prevent command injection.",
        "Lock down file output destinations to avoid overwriting system files.",
        "Prevent directory traversal and restrict file access scope.",
        "Handle large files with memory-efficient streaming or chunked processing."
      ],
      "validation_requirements": [
        "Strictly require documents directory and at least one processing instruction.",
        "Validate config file existence and type prior to loading.",
        "Check output_format against allowed values (json, csv, txt, pdf).",
        "Search_query maximum length and sanitization if used in external calls.",
        "Boolean flag input should not accept arbitrary values (set, unset only)."
      ],
      "file_handling_notes": [
        "All document processing should occur in a sandboxed environment.",
        "Iterate over files in the 'documents' directory, skipping unsupported or unreadable files.",
        "Configuration file is loaded only if specified; fallback to defaults as needed.",
        "Enforce single batch per command; for very large directories, support batching/chunking and user feedback."
      ],
      "recommended_defaults": {
        "model": null,
        "output_format": "json"
      }
    }
  },
  "cli_naming": {
    "naming_results": {
      "tool_name": {
        "original": "document-batch-analyzer",
        "kebab_case": "document-batch-analyzer",
        "validated": "document-batch-analyzer",
        "conflicts_resolved": null
      },
      "flag_names": [
        {
          "variable_name": "config",
          "long_flag": "--config",
          "short_flag": "-c",
          "conflicts": {
            "long_flag_conflicts": null,
            "short_flag_conflicts": null,
            "resolution_method": null,
            "resolution_details": null
          },
          "validation": {
            "long_flag_valid": true,
            "short_flag_valid": true,
            "issues": null
          },
          "alternatives": null
        },
        {
          "variable_name": "documents",
          "long_flag": "--documents",
          "short_flag": "-d",
          "conflicts": {
            "long_flag_conflicts": null,
            "short_flag_conflicts": null,
            "resolution_method": null,
            "resolution_details": null
          },
          "validation": {
            "long_flag_valid": true,
            "short_flag_valid": true,
            "issues": null
          },
          "alternatives": null
        },
        {
          "variable_name": "analysis_mode",
          "long_flag": "--analysis-mode",
          "short_flag": "-m",
          "conflicts": {
            "long_flag_conflicts": null,
            "short_flag_conflicts": [
              "model (ostruct reserved)"
            ],
            "resolution_method": "alternative_letter",
            "resolution_details": "Short flag -m reserved for --model by convention. Recommending -a or no short flag to avoid collision."
          },
          "validation": {
            "long_flag_valid": true,
            "short_flag_valid": false,
            "issues": [
              "Short flag -m reserved for model selection."
            ]
          },
          "alternatives": [
            {
              "long_flag": "--analysis-mode",
              "short_flag": "-a",
              "reason": "Use -a for 'analysis' to avoid clashing with reserved -m."
            },
            {
              "long_flag": "--analysis-mode",
              "short_flag": null,
              "reason": "Omit short flag if -a is not sufficiently meaningful for users."
            }
          ]
        },
        {
          "variable_name": "include_metadata",
          "long_flag": "--include-metadata",
          "short_flag": "-i",
          "conflicts": {
            "long_flag_conflicts": null,
            "short_flag_conflicts": null,
            "resolution_method": null,
            "resolution_details": null
          },
          "validation": {
            "long_flag_valid": true,
            "short_flag_valid": true,
            "issues": null
          },
          "alternatives": [
            {
              "long_flag": "--include-metadata",
              "short_flag": null,
              "reason": "-i fits but is a common flag for input; document clearly in help, or consider leaving it long-only for clarity."
            }
          ]
        },
        {
          "variable_name": "output_format",
          "long_flag": "--output-format",
          "short_flag": "-o",
          "conflicts": {
            "long_flag_conflicts": null,
            "short_flag_conflicts": [
              "ostruct reserved for output file"
            ],
            "resolution_method": "suffix_addition",
            "resolution_details": "Short flag -o commonly reserved for output file. Use -f for format, document in help text."
          },
          "validation": {
            "long_flag_valid": true,
            "short_flag_valid": false,
            "issues": [
              "-o typically understood as output file, not format."
            ]
          },
          "alternatives": [
            {
              "long_flag": "--output-format",
              "short_flag": "-f",
              "reason": "Use -f for format to avoid conflict with output file."
            }
          ]
        },
        {
          "variable_name": "enable_search",
          "long_flag": "--enable-search",
          "short_flag": "-s",
          "conflicts": {
            "long_flag_conflicts": null,
            "short_flag_conflicts": [
              "Potential overlap if -s used for summarize or source"
            ],
            "resolution_method": null,
            "resolution_details": null
          },
          "validation": {
            "long_flag_valid": true,
            "short_flag_valid": true,
            "issues": null
          },
          "alternatives": [
            {
              "long_flag": "--enable-search",
              "short_flag": null,
              "reason": "Flag usage is rare; okay without short flag, or use -e for enable if desired."
            }
          ]
        },
        {
          "variable_name": "search_query",
          "long_flag": "--search-query",
          "short_flag": "-q",
          "conflicts": {
            "long_flag_conflicts": null,
            "short_flag_conflicts": [
              "Commonly -q is for quiet; potential confusion."
            ],
            "resolution_method": "alternative_letter",
            "resolution_details": "Although -q is usually reserved for 'quiet', here it's used for search query. Acceptable if tool supports no quiet mode."
          },
          "validation": {
            "long_flag_valid": true,
            "short_flag_valid": true,
            "issues": [
              "Potential confusion with 'quiet' convention."
            ]
          },
          "alternatives": [
            {
              "long_flag": "--search-query",
              "short_flag": "-s",
              "reason": "Alternative if -q is needed for 'quiet'."
            },
            {
              "long_flag": "--search-query",
              "short_flag": null,
              "reason": "No short flag to strictly preserve conventions."
            }
          ]
        },
        {
          "variable_name": "processing_instructions",
          "long_flag": "--processing-instruction",
          "short_flag": "-p",
          "conflicts": {
            "long_flag_conflicts": null,
            "short_flag_conflicts": null,
            "resolution_method": null,
            "resolution_details": null
          },
          "validation": {
            "long_flag_valid": true,
            "short_flag_valid": true,
            "issues": null
          },
          "alternatives": [
            {
              "long_flag": "--processing-instruction",
              "short_flag": "-x",
              "reason": "If -p is used elsewhere or for 'path', use -x as in 'execute' or 'extra-instructions'."
            }
          ]
        }
      ]
    },
    "naming_conventions": {
      "kebab_case_rules": [
        "Split words on capital letters, underscores, and numerals.",
        "Convert all letters to lowercase.",
        "Replace spaces and special characters with hyphens.",
        "Trim consecutive, leading, and trailing hyphens.",
        "Preserve meaningful numbers and abbreviations."
      ],
      "short_flag_strategy": "Prioritize first unique, intuitive letter for each flag; avoid reserved or ambiguous letters; use first consonant or next available meaningful letter if conflict; omit short flag if no clear alternative.",
      "conflict_resolution_strategy": "Detect reserved/common flag conflicts; resolve by selecting alternative meaningful letters, adding context with prefixes/suffixes, or omitting short flags; document and validate all resolutions.",
      "reserved_flags": [
        "-h",
        "--help",
        "-v",
        "--verbose",
        "-m",
        "--model",
        "-o",
        "--output",
        "-V",
        "--version",
        "-q",
        "--quiet",
        "-f",
        "--force",
        "-r",
        "--recursive",
        "-n",
        "--dry-run",
        "--dry-run",
        "--debug"
      ]
    },
    "quality_metrics": {
      "naming_consistency": 0.97,
      "conflict_resolution_success": 1.0,
      "usability_score": 0.93,
      "total_conflicts": 4,
      "resolved_conflicts": 4
    },
    "recommendations": {
      "naming_improvements": [
        "Use more descriptive suffixes for boolean flags (e.g., --with-metadata or --metadata-included) if confusion is possible.",
        "Strongly consider omitting short flags for rare or potentially confusing options to reduce ambiguity.",
        "Document all reserved or custom short flag assignments in the help output."
      ],
      "conflict_prevention": [
        "Audit all flags for collision with both reserved and application-specific uses before release.",
        "Avoid assigning short flags to rarely used or advanced options.",
        "Consider unique flag patterns (e.g., double-dash plus single letter: --m for model) only if industry standard for your user base."
      ],
      "usability_enhancements": [
        "Provide detailed CLI help examples showing both long and (where available) short flags.",
        "For complex flags, include usage hints or autofill support in interactive shells.",
        "Ensure help output clearly explains any deviations from common short-flag conventions (e.g., if -q is not quiet)."
      ]
    }
  },
  "policy_generation": {
    "model_policy": {
      "default_model": "gpt-4",
      "model_restrictions": {
        "allowed_models": [
          "gpt-4",
          "gpt-3.5-turbo"
        ],
        "blocked_models": [
          "experimental-*",
          "gpt-jailbreak"
        ],
        "minimum_capability_level": "advanced"
      },
      "fallback_strategy": {
        "fallback_models": [
          "gpt-3.5-turbo"
        ],
        "degradation_strategy": "On model error, fallback to the next model in the allowed list. If all fail, return a clear error message."
      },
      "model_specific_config": {
        "temperature": 0.2,
        "max_tokens": 2048,
        "top_p": 0.9
      },
      "rationale": "Defaulting to gpt-4 for its advanced capability, but supporting fallback for availability. Model selection sensitive to both security and complexity. Blocklist prevents unauthorized/less-secure models."
    },
    "tool_integration_policy": {
      "enabled_tools": [
        "code_interpreter",
        "file_search",
        "web_search"
      ],
      "tool_configurations": {
        "code_interpreter": {
          "enabled": true,
          "timeout": 30,
          "max_file_size": 1048576,
          "allowed_extensions": [
            ".py",
            ".txt",
            ".csv"
          ],
          "security_restrictions": [
            "sandboxed_execution",
            "network_disabled"
          ]
        },
        "file_search": {
          "enabled": true,
          "max_file_count": 20,
          "max_total_size": 5242880,
          "allowed_extensions": [
            ".txt",
            ".csv",
            ".md"
          ]
        },
        "web_search": {
          "enabled": true,
          "max_queries": 5,
          "timeout": 15,
          "allowed_domains": null,
          "blocked_domains": [
            "social_media.com",
            "example-unsafe.com"
          ]
        }
      },
      "mcp_server_policy": {
        "allow_mcp_servers": false,
        "suggested_servers": null,
        "server_restrictions": [
          "No external unapproved MCP server access"
        ]
      },
      "rationale": "Only enable essential tools, with preset filesystem and web limits. Disable dangerous file types and network actions within code execution. MCP server access limited for enhanced security."
    },
    "security_policy": {
      "input_validation": {
        "strict_validation": true,
        "sanitization_rules": [
          {
            "input_type": "text",
            "rule": "strip_html, remove_control_characters",
            "rationale": "Prevent injection and unexpected formatting."
          },
          {
            "input_type": "file",
            "rule": "allow_list_extensions, scan_virus",
            "rationale": "Minimize risk from file uploads."
          }
        ],
        "validation_errors": "reject_and_explain"
      },
      "file_access": {
        "allowed_paths": [
          "/tmp",
          "./user_files"
        ],
        "blocked_paths": [
          "/etc",
          "/var",
          "/home",
          "~/",
          "/root"
        ],
        "file_size_limits": {
          "max_individual_file": 1048576,
          "max_total_size": 5242880
        },
        "allowed_extensions": [
          ".txt",
          ".csv",
          ".md"
        ]
      },
      "output_security": {
        "sanitize_output": true,
        "redact_sensitive_data": true,
        "output_validation": true,
        "sensitive_patterns": [
          "private[_\\s]key",
          "password[:=]",
          "secret"
        ]
      },
      "authentication": {
        "require_api_key": true,
        "api_key_validation": true,
        "rate_limiting": {
          "enabled": true,
          "requests_per_minute": 60,
          "burst_limit": 10
        }
      },
      "rationale": "Strong input/output validation guards against injection and leakage. File access restricted heavily. API keys required with rate limiting; output always sanitized."
    },
    "global_arguments_policy": {
      "required_global_args": [
        {
          "name": "input",
          "flag": "--input",
          "description": "Input file or string to process",
          "validation": "required, file or string"
        }
      ],
      "optional_global_args": [
        {
          "name": "config",
          "flag": "--config",
          "description": "Alternate configuration file",
          "default_value": "config.yaml",
          "validation": "optional, yaml"
        },
        {
          "name": "verbose",
          "flag": "--verbose",
          "description": "Enable verbose output",
          "default_value": "false",
          "validation": "optional, boolean"
        }
      ],
      "environment_variables": [
        {
          "name": "TOOL_API_KEY",
          "description": "API key for authentication",
          "required": true,
          "default_value": null
        }
      ],
      "argument_precedence": [
        "CLI flags",
        "environment variables",
        "configuration file",
        "defaults"
      ],
      "rationale": "Required arguments cover core input; optionals enable flexibility. Env vars used for secrets; precedence order ensures predictability and security."
    },
    "error_handling_policy": {
      "error_reporting": {
        "verbosity_level": "normal",
        "include_stack_traces": false,
        "log_errors": true,
        "user_friendly_messages": true
      },
      "retry_policies": {
        "max_retries": 2,
        "retry_delay": 3,
        "exponential_backoff": true,
        "retryable_errors": [
          "network_error",
          "timeout",
          "rate_limit"
        ]
      },
      "graceful_degradation": {
        "fallback_strategies": [
          {
            "error_type": "model_unavailable",
            "strategy": "fallback_model",
            "description": "Use fallback model if primary fails."
          },
          {
            "error_type": "tool_unavailable",
            "strategy": "partial_feature_set",
            "description": "Disable unavailable tool, continue with available features."
          }
        ],
        "partial_results": true
      },
      "rationale": "User-centric error reporting avoids information leakage. Retries for transient errors, clear degradations/fallbacks. Logs for developer troubleshooting."
    },
    "resource_management_policy": {
      "performance_limits": {
        "max_memory_usage": 1024,
        "max_cpu_time": 60,
        "max_execution_time": 120
      },
      "concurrency": {
        "max_concurrent_operations": 4,
        "thread_pool_size": 4,
        "queue_size": 10
      },
      "temporary_files": {
        "cleanup_policy": "on_exit",
        "max_temp_size": 10485760,
        "temp_directory": "/tmp"
      },
      "rationale": "Limits set to protect host resources; concurrency lets CLI scale moderately. Temp files cleaned promptly, max sizes enforced to avoid disk exhaustion."
    },
    "deployment_scenarios": {
      "development": {
        "description": "Looser limits, verbose errors, stacked logs for debugging.",
        "policy_overrides": {}
      },
      "production": {
        "description": "Stricter limits, sanitized outputs, input/file access strictly enforced.",
        "policy_overrides": {}
      },
      "enterprise": {
        "description": "Production policy plus enterprise auth, audit logging, extended rate limiting.",
        "policy_overrides": {}
      }
    },
    "customization_options": {
      "configurable_parameters": [
        {
          "parameter": "max_concurrent_operations",
          "description": "Maximum number of simultaneous tasks",
          "type": "integer",
          "default_value": "4",
          "validation": "1-16"
        },
        {
          "parameter": "timeout",
          "description": "Operation timeout in seconds",
          "type": "integer",
          "default_value": "30",
          "validation": "5-300"
        },
        {
          "parameter": "model",
          "description": "Model selection override",
          "type": "string",
          "default_value": "gpt-4",
          "validation": "In allowed_models"
        },
        {
          "parameter": "tool_access",
          "description": "Enable or disable individual tools",
          "type": "json",
          "default_value": "{\"code_interpreter\": true, \"file_search\": true, \"web_search\": true}",
          "validation": "bool for each tool"
        }
      ],
      "configuration_methods": [
        "config file",
        "environment variable",
        "CLI flag"
      ],
      "override_mechanisms": [
        "CLI flags override config/ENV",
        "Admin can set allowed tools via config"
      ]
    },
    "quality_metrics": {
      "security_score": 9.5,
      "usability_score": 8.5,
      "completeness_score": 9.0,
      "recommendations": [
        "Regularly review allowed/blocked file extensions.",
        "Consider more granular rate-limiting per user.",
        "Provide sample configuration files for common use cases."
      ]
    }
  }
}
