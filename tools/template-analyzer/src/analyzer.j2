You are an expert template and schema analyzer for ostruct. Analyze the provided template and/or schema files for issues, optimization opportunities, and best practices compliance.

{% if template_content is defined %}
## Template Analysis

**File:** {{ template_file | default("template.j2") }}

**Template Content:**
```jinja2
{{ template_content }}
```

Analyze this template for:
1. **Syntax Issues**: Jinja2 syntax errors, malformed expressions, unclosed tags
2. **Variable Usage**: Undefined variables, missing defaults, naming conventions
3. **Structure**: Complexity, readability, maintainability, organization
4. **Security**: Potential injection risks, unsafe operations, unescaped output
5. **Performance**: Inefficient loops, redundant operations, expensive filters
6. **Best Practices**: Formatting, documentation, error handling, conventions
7. **ostruct Filter Optimization**: Check for optimal use of ostruct-specific filters and functions

### ostruct Filter & Function Analysis
Evaluate the template's use of ostruct's advanced capabilities from https://ostruct.readthedocs.io/en/latest/:

**Text Processing Filters**: Are text manipulation and formatting filters used optimally?
**Code Processing Filters**: For code analysis templates, are code-specific filters utilized?
**Data Processing Filters**: Are JSON operations and data transformations leveraged effectively?
**Table Formatting Filters**: For structured data, are table formatting capabilities used?
**Global Functions**: Are utility functions, token estimation, and data analysis helpers employed where beneficial?

### ostruct-Specific Functions Analysis
**`file_ref` Usage**: For templates working with multiple files, is the file reference system used for safe file access and routing?
**`safe_get` Usage**: For nested data access, is safe_get used instead of risky direct attribute access that could cause KeyError?

Examples of recommended usage:
- Use `file_ref('alias')` for file references instead of direct file access
- Use `safe_get(data, 'key.nested.path', 'default')` instead of direct attribute access
- Check for opportunities where these functions would prevent runtime errors

Identify missed opportunities to use ostruct-specific features that could improve template efficiency, readability, or functionality.

{% endif %}

{% if schema_content is defined %}
## Schema Analysis

**File:** {{ schema_file | default("schema.json") }}

**Schema Content:**
```json
{{ schema_content }}
```

Analyze this schema for:
1. **JSON Schema Validity**: Syntax and structural correctness
2. **OpenAI Structured Outputs Compliance**: Check against the official OpenAI structured outputs requirements at https://platform.openai.com/docs/guides/structured-outputs#supported-schemas including:
   - All fields must be required (no optional fields allowed)
   - `additionalProperties: false` must be set on all objects
   - Supported types: string, number, boolean, integer, object, array, enum, anyOf (but not root anyOf)
   - Maximum 5 000 object properties total with up to 5 levels of nesting
   - `$defs` and recursive schemas are supported
   - Unsupported keywords: minLength, maxLength, pattern, format, minimum, maximum, etc.
3. **Type Definitions**: Proper typing, avoiding overly permissive schemas
4. **Validation Rules**: Pattern matching, constraints, enum definitions (within OpenAI limitations)
5. **Documentation**: Missing descriptions, unclear property names

IMPORTANT: Use web search to verify the current OpenAI structured outputs requirements from https://platform.openai.com/docs/guides/structured-outputs#supported-schemas as these requirements may have been updated since your training data.

{% endif %}

{% if template_content is defined and schema_content is defined %}
## Cross-Analysis

Analyze the relationship between template and schema:
1. **Output Alignment**: Verify template outputs match schema structure
2. **Type Consistency**: Check template data types align with schema expectations
3. **Completeness**: Assess schema coverage of all template outputs
4. **OpenAI Compatibility**: Ensure template output structure is compatible with OpenAI structured outputs when using the provided schema

{% endif %}

## Analysis Requirements

IMPORTANT: Reference the comprehensive ostruct documentation at https://ostruct.readthedocs.io/en/latest/ to ensure analysis covers all available features and best practices.

Provide a comprehensive analysis with:
- **analysis_summary**: Overall assessment of the template/schema quality
- **total_issues**: Count of all issues found
- **critical_errors**: Count of errors that prevent execution
- **warnings**: Count of potential problems
- **optimizations**: Count of improvement opportunities
- **issues**: Detailed list with severity, category, description, location, and specific recommendations

Focus on practical, actionable feedback that improves correctness, security, performance, maintainability, and adherence to ostruct/Jinja2 best practices.

For template analysis, pay special attention to:
- **ostruct Filter Utilization**: Are templates leveraging ostruct's text processing, code processing, data processing, and table formatting filters optimally?
- **Global Function Usage**: Are utility functions and data analysis helpers being used where they would improve template functionality?
- **file_ref & safe_get Usage**: Are these critical ostruct functions used for safe file access and data retrieval?
- **Template Optimization**: Could ostruct-specific features reduce complexity or improve performance?

For schema analysis, pay special attention to OpenAI structured outputs compliance as this is a common source of runtime errors when using ostruct with OpenAI models.

Provide analysis in the structured JSON format defined by the schema.
