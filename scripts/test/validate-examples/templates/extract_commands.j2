You are an expert at analyzing documentation and extracting executable commands. Your task is to analyze a README file and extract all ostruct commands that can be executed.

## README Content
{{ file_ref("readme_content") }}

## Example Directory
The commands in this README are located in: {{ safe_get("example_directory", "examples/unknown") }}

## ostruct CLI Syntax Reference
{{ file_ref("ostruct_help") }}

## Instructions

1. **Find ALL ostruct commands** in the ENTIRE README content above
2. **Search comprehensively** - Look in ALL sections including:
   - Main content sections
   - Example sections
   - Best practices sections
   - Code blocks in any context
   - Tutorial or guide sections
3. **Normalize multi-line commands** - combine lines that use backslash continuation into single commands
4. **Resolve relative paths** - convert relative file paths to be relative to the example directory
5. **Identify dependencies** - list all files that each command requires
6. **Categorize commands** - determine if they're suitable for dry-run testing
7. **Detect placeholder patterns** - identify commands with obvious placeholder paths

## Command Analysis Rules

- **CRITICAL**: Extract EVERY command that starts with "ostruct run" regardless of which section it appears in
- Include commands from ALL sections: examples, tutorials, best practices, debugging, etc.
- For multi-line commands with backslashes (\), combine them into a single line
- **KEEP PATHS RELATIVE**: Do NOT convert relative paths - keep them as-is (e.g., "prompts/task.j2" stays "prompts/task.j2")
- The working_directory will be set to the example directory, so paths should be relative to that
- Identify all file dependencies (templates, schemas, input files)
- Mark commands as "executable" if they appear to be complete runnable examples
- Mark commands as "reference" if they appear to be partial or explanatory
- **Mark commands as "placeholder"** if they contain obvious placeholder paths

## IMPORTANT: Comprehensive Extraction

You MUST scan the ENTIRE README file thoroughly. Common places where commands appear:
- Main usage examples
- "Basic Usage" sections
- "Examples" sections
- "Best Practices" sections
- "Testing" or "Debugging" sections
- Code comments within code blocks
- Any code block that contains ostruct commands

Do NOT skip any section of the README.

## Placeholder Pattern Detection

Commands should be marked as "placeholder" if they contain any of these patterns:
- Paths starting with `/path/to/` (e.g., `/path/to/codebase`, `/path/to/configs`)
- Paths containing `<placeholder>` or `{placeholder}` syntax
- Paths with `...` indicating continuation (e.g., `path/to/...`)
- Generic placeholder names like `your-file.txt`, `example-file.json`
- URLs with placeholder domains like `example.com`, `your-domain.com`

These commands should still be syntax-validated but not executed.

## Syntax Validation Using CLI Reference

Use the ostruct CLI syntax reference above to:
- **Validate attachment syntax**: Ensure attachment targets like `ci:`, `fs:`, `code-interpreter:` are correct
- **Check flag validity**: Verify that flags like `--dry-run`, `--sys-file`, `-V` are supported
- **Validate command structure**: Ensure commands follow the pattern `ostruct [command] template schema [options]`
- **Identify routing targets**: Understand when files go to Code Interpreter vs File Search vs template-only
- **Catch syntax errors**: Flag commands that don't match the expected ostruct syntax patterns

Pay special attention to:
- File attachment syntax: `--file [targets:]alias path` and `--dir [targets:]alias path`
- Target routing: `ci` (code-interpreter), `fs` (file-search), multi-target `ci,fs:`
- Variable syntax: `-V name=value`
- System file usage: `--sys-file path`

## Output Requirements

Extract commands in the specified JSON schema format. For each command:
- `command`: The complete, normalized ostruct command
- `working_directory`: Where the command should be executed from
- `dependencies`: Array of file paths the command requires
- `type`: "executable", "reference", or "placeholder"
- `description`: Brief description of what the command does
- `original_text`: The original text from the README (for debugging)

## Context Information

- **README File**: {{ safe_get("readme_file", "unknown") }}
- **Example Directory**: {{ safe_get("example_directory", "examples/unknown") }}
- **Analysis Target**: Extract executable ostruct commands for validation testing

Focus on commands that appear to be complete, runnable examples rather than partial snippets or explanatory text. Commands with placeholder paths should be syntax-validated only.
