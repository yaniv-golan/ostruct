#!/bin/bash

# ostruct macOS Installation Script
# This script sets up ostruct on macOS with proper Python and PATH configuration
# Usage: curl -sSL https://raw.githubusercontent.com/yaniv-golan/ostruct/main/scripts/install-macos.sh | bash

set -e  # Exit on any error

# Version information (automatically updated during build)
EXPECTED_VERSION="{{OSTRUCT_VERSION}}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}ℹ️  $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

# Detect shell
detect_shell() {
    if [[ -n "$ZSH_VERSION" ]]; then
        echo "zsh"
    elif [[ -n "$BASH_VERSION" ]]; then
        echo "bash"
    else
        echo "unknown"
    fi
}

# Get shell config file
get_shell_config() {
    local shell_type="$1"
    case "$shell_type" in
        "zsh")
            echo "$HOME/.zshrc"
            ;;
        "bash")
            if [[ -f "$HOME/.bash_profile" ]]; then
                echo "$HOME/.bash_profile"
            else
                echo "$HOME/.bashrc"
            fi
            ;;
        *)
            echo "$HOME/.profile"
            ;;
    esac
}

# Check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check if Python version is compatible
check_python_version() {
    local python_cmd="$1"
    local version_output

    if ! version_output=$($python_cmd --version 2>&1); then
        return 1
    fi

    # Extract version number (e.g., "Python 3.10.2" -> "3.10.2")
    local version=$(echo "$version_output" | sed 's/Python //')
    local major=$(echo "$version" | cut -d. -f1)
    local minor=$(echo "$version" | cut -d. -f2)

    # Check if version >= 3.10
    if [[ "$major" -gt 3 ]] || [[ "$major" -eq 3 && "$minor" -ge 10 ]]; then
        return 0
    else
        return 1
    fi
}

# Find compatible Python installation
find_python() {
    local python_candidates=("python3.12" "python3.11" "python3.10" "python3" "python")

    for cmd in "${python_candidates[@]}"; do
        if command_exists "$cmd" && check_python_version "$cmd"; then
            echo "$cmd"
            return 0
        fi
    done

    return 1
}

# Install Homebrew
install_homebrew() {
    log_info "Installing Homebrew..."
    if ! /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"; then
        log_error "Failed to install Homebrew"
        exit 1
    fi

    # Add Homebrew to PATH for current session
    if [[ -f "/opt/homebrew/bin/brew" ]]; then
        # Apple Silicon
        eval "$(/opt/homebrew/bin/brew shellenv)"
    elif [[ -f "/usr/local/bin/brew" ]]; then
        # Intel
        eval "$(/usr/local/bin/brew shellenv)"
    fi

    log_success "Homebrew installed successfully"
}

# Install Python via Homebrew
install_python_homebrew() {
    log_info "Installing Python via Homebrew..."

    if ! command_exists brew; then
        install_homebrew
    fi

    if ! brew install python@3.12; then
        log_error "Failed to install Python via Homebrew"
        exit 1
    fi

    log_success "Python installed via Homebrew"
}

# Install Python from python.org
install_python_official() {
    log_info "Installing Python from python.org..."

    # Detect architecture
    local arch=$(uname -m)
    local installer_url

    if [[ "$arch" == "arm64" ]]; then
        # Apple Silicon
        installer_url="https://www.python.org/ftp/python/3.12.0/python-3.12.0-macos11.pkg"
    else
        # Intel
        installer_url="https://www.python.org/ftp/python/3.12.0/python-3.12.0-macosx10.9.pkg"
    fi

    local temp_file="/tmp/python-installer.pkg"

    log_info "Downloading Python installer..."
    if ! curl -L -o "$temp_file" "$installer_url"; then
        log_error "Failed to download Python installer"
        exit 1
    fi

    log_info "Installing Python (requires admin privileges)..."
    if ! sudo installer -pkg "$temp_file" -target /; then
        log_error "Failed to install Python"
        exit 1
    fi

    # Clean up
    rm -f "$temp_file"

    log_success "Python installed from python.org"
}

# Get Python user bin directory
get_python_user_bin() {
    local python_cmd="$1"
    local user_base

    if ! user_base=$($python_cmd -m site --user-base 2>/dev/null); then
        return 1
    fi

    echo "$user_base/bin"
}

# Add directory to PATH in shell config
add_to_path() {
    local dir_to_add="$1"
    local shell_config="$2"
    local shell_type="$3"

    # Check if already in PATH
    if echo "$PATH" | grep -q "$dir_to_add"; then
        log_info "Directory $dir_to_add already in PATH"
        return 0
    fi

    # Check if already in shell config
    if [[ -f "$shell_config" ]] && grep -q "$dir_to_add" "$shell_config"; then
        log_info "Directory $dir_to_add already configured in $shell_config"
        return 0
    fi

    # Add to shell config
    local export_line="export PATH=\"$dir_to_add:\$PATH\""
    echo "" >> "$shell_config"
    echo "# Added by ostruct installer" >> "$shell_config"
    echo "$export_line" >> "$shell_config"

    # Add to current session
    export PATH="$dir_to_add:$PATH"

    log_success "Added $dir_to_add to PATH in $shell_config"
}

# Compare version strings (returns 0 if v1 >= v2)
version_compare() {
    local v1="$1"
    local v2="$2"

    # Extract just the version numbers (remove any prefixes like "ostruct-cli ")
    v1=$(echo "$v1" | sed 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/')
    v2=$(echo "$v2" | sed 's/.*\([0-9]\+\.[0-9]\+\.[0-9]\+\).*/\1/')

    # Use sort -V for version comparison
    if [[ "$(printf '%s\n' "$v1" "$v2" | sort -V | head -n1)" == "$v2" ]]; then
        return 0  # v1 >= v2
    else
        return 1  # v1 < v2
    fi
}

# Main installation function
main() {
    # Check for dry-run mode
    local DRY_RUN=false
    if [[ "$1" == "--dry-run" || "$1" == "-n" ]]; then
        DRY_RUN=true
        log_info "Running in DRY-RUN mode - no actual changes will be made"
        echo ""
    fi

    echo "🚀 ostruct macOS Installation Script"
    echo "=================================="
    echo ""

    # Detect shell and config file
    local shell_type=$(detect_shell)
    local shell_config=$(get_shell_config "$shell_type")

    log_info "Detected shell: $shell_type"
    log_info "Shell config file: $shell_config"
    echo ""

    # Check for Python installation
    log_info "Checking Python installation..."
    local python_cmd
    if python_cmd=$(find_python); then
        local python_version=$($python_cmd --version 2>&1)
        log_success "Found compatible $python_version at $(which $python_cmd)"
    else
        log_warning "No compatible Python 3.10+ found"

        if [[ "$DRY_RUN" == "true" ]]; then
            log_info "[DRY-RUN] Would install Python 3.12"
            python_cmd="python3.12"
        else
            # Try Homebrew first, then official installer
            if command_exists brew || [[ -f "/opt/homebrew/bin/brew" ]] || [[ -f "/usr/local/bin/brew" ]]; then
                install_python_homebrew
            else
                log_info "Homebrew not found, using official Python installer"
                install_python_official
            fi

            # Try to find Python again
            if python_cmd=$(find_python); then
                local python_version=$($python_cmd --version 2>&1)
                log_success "Python installation successful: $python_version"
            else
                log_error "Failed to install or find compatible Python"
                exit 1
            fi
        fi
    fi
    echo ""

    # Install ostruct-cli using appropriate method
    log_info "Installing ostruct-cli..."
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "[DRY-RUN] Would try pipx first, then pip with appropriate flags"
        log_success "[DRY-RUN] ostruct-cli installation simulated"
    else
        # Try pipx first (recommended for CLI applications)
        if command_exists pipx; then
            log_info "Using pipx for installation..."
            if pipx install ostruct-cli; then
                log_success "ostruct-cli installed successfully with pipx"
            else
                log_warning "pipx installation failed, trying pip..."
            fi
        else
            # Check if we can install pipx via brew
            if command_exists brew; then
                log_info "Installing pipx via Homebrew..."
                if brew install pipx && pipx install ostruct-cli; then
                    log_success "ostruct-cli installed successfully with pipx"
                else
                    log_warning "pipx installation failed, trying pip..."
                fi
            fi
        fi

        # If pipx didn't work or isn't available, try pip with appropriate flags
        if ! command_exists ostruct; then
            log_info "Falling back to pip installation..."

            # Clear cache first
            log_info "Clearing pip cache to ensure latest version..."
            $python_cmd -m pip cache purge 2>/dev/null || true

            # Try --user first (PEP 668 compliant)
            if $python_cmd -m pip install --user --no-cache-dir --upgrade ostruct-cli 2>/dev/null; then
                log_success "ostruct-cli installed successfully with pip --user"
            else
                log_warning "User installation failed, trying with --break-system-packages..."
                # Fallback to --break-system-packages for externally-managed environments
                if $python_cmd -m pip install --break-system-packages --no-cache-dir --upgrade ostruct-cli; then
                    log_success "ostruct-cli installed successfully with pip --break-system-packages"
                else
                    log_error "Failed to install ostruct-cli with pip"
                    exit 1
                fi
            fi
        fi
    fi
    echo ""

    # Configure PATH for ostruct
    log_info "Configuring PATH..."
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "[DRY-RUN] Would configure PATH for ostruct"
        log_success "[DRY-RUN] PATH configuration simulated"
    else
        local bin_dirs_to_add=()

        # Check if installed via pipx
        if command_exists pipx; then
            local pipx_bin_dir="$HOME/.local/bin"
            if [[ -f "$pipx_bin_dir/ostruct" ]]; then
                bin_dirs_to_add+=("$pipx_bin_dir")
                log_info "Found ostruct in pipx directory: $pipx_bin_dir"
            fi
        fi

        # Check Python user bin directory (for pip --user installations)
        local python_user_bin
        if python_user_bin=$(get_python_user_bin "$python_cmd"); then
            if [[ -f "$python_user_bin/ostruct" ]]; then
                bin_dirs_to_add+=("$python_user_bin")
                log_info "Found ostruct in Python user bin: $python_user_bin"
            fi
        fi

        # Add directories to PATH
        for bin_dir in "${bin_dirs_to_add[@]}"; do
            add_to_path "$bin_dir" "$shell_config" "$shell_type"
        done

        if [[ ${#bin_dirs_to_add[@]} -eq 0 ]]; then
            # Check if ostruct is available system-wide (--break-system-packages installation)
            if command_exists ostruct; then
                log_success "ostruct is available system-wide, no PATH configuration needed"
            else
                log_warning "ostruct installation location unknown, may need manual PATH configuration"
            fi
        else
            log_success "PATH configured successfully"
        fi
    fi
    echo ""

    # Test installation and verify version
    log_info "Testing ostruct installation..."
    if [[ "$DRY_RUN" == "true" ]]; then
        log_success "[DRY-RUN] ostruct installation test simulated"
    else
        if command_exists ostruct; then
            local version=$(ostruct --version 2>/dev/null || echo "unknown")
            log_success "ostruct is working! Version: $version"

            # Check if we got the expected version or newer
            if version_compare "$version" "$EXPECTED_VERSION"; then
                log_success "✅ Version $version is current (expected $EXPECTED_VERSION or newer)"
            else
                log_warning "⚠️  Version $version installed (expected $EXPECTED_VERSION or newer)"
                log_info "This might be due to package index delays. The installation should still work."
            fi
        else
            log_warning "ostruct command not found in current session"
            log_info "Please restart your terminal or run: source $shell_config"
            log_info "Then test with: ostruct --version"
        fi
    fi
    echo ""

    # Success message
    echo "🎉 Installation Complete!"
    echo "======================="
    echo ""
    log_success "ostruct has been installed successfully!"
    echo ""
    echo "Next steps:"
    echo "1. Restart your terminal or run: source $shell_config"
    echo "2. Test the installation: ostruct --version"
    echo "3. Get help: ostruct --help"
    echo "4. Set up your OpenAI API key:"
    echo "   export OPENAI_API_KEY='your-api-key-here'"
    echo "   # Or create a .env file with: OPENAI_API_KEY=your-api-key-here"
    echo ""
    echo "📖 Documentation: https://ostruct.readthedocs.io"
    echo "🐛 Issues: https://github.com/yaniv-golan/ostruct/issues"
    echo ""

    # Show what was installed
    echo "Installed components:"
    if [[ "$DRY_RUN" == "true" ]]; then
        echo "  • [DRY-RUN] Would show installed components"
    else
        if command_exists brew; then
            echo "  • Homebrew: $(brew --version | head -1)"
        fi
        echo "  • Python: $($python_cmd --version)"
        echo "  • ostruct: $(ostruct --version 2>/dev/null || echo 'installed')"
    fi
    echo ""
}

# Run main function
main "$@"
