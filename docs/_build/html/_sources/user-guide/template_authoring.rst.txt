Template Authoring Guide
========================

Learn how to create powerful Jinja2 templates for ostruct that combine static text with dynamic content, file processing, and advanced filtering capabilities.

.. note::
   This guide assumes no prior knowledge of Jinja2. Templates use a customized Jinja2 environment with ostruct-specific enhancements.

Template Basics
================

Template Structure
------------------

ostruct templates are Jinja2 files (typically with ``.j2`` extension) that can include:

- **Static text** - Regular content that appears as-is
- **Variables** - Dynamic content from files, CLI arguments, or system data
- **Control structures** - Loops, conditionals, and logic
- **Filters** - Functions to process and transform data
- **YAML frontmatter** - Configuration and system prompts

Basic Template Example
----------------------

.. code-block:: jinja

   ---
   system_prompt: You are an expert data analyst.
   ---
   Analyze this configuration file:
   
   {{ config_yaml.content }}
   
   Summary of findings:
   {% for file in logs %}
   - {{ file.name }}: {{ file.content | word_count }} words
   {% endfor %}

Variables and Data Access
=========================

Variable Sources
----------------

ostruct makes data available through several sources:

1. **File Variables** - From file routing options (``-ft``, ``-fc``, ``-fs``)
2. **CLI Variables** - From ``-V`` and ``-J`` flags
3. **System Variables** - Built-in ostruct context
4. **Global Functions** - Template helper functions

File Variables
==============

Understanding File Routing
---------------------------

Different file routing options make files available in different ways:

.. list-table::
   :header-rows: 1
   :widths: 20 25 25 30

   * - Routing Option
     - Variable Access
     - Upload Behavior
     - Use Cases
   * - ``-ft`` (Template)
     - ✅ Available
     - ❌ Not uploaded
     - Config files, templates
   * - ``-fc`` (Code Interpreter)
     - ✅ Available
     - ✅ Uploaded
     - Data analysis files
   * - ``-fs`` (File Search)
     - ✅ Available
     - ✅ Uploaded
     - Documents, knowledge bases

Variable Naming Rules
---------------------

ostruct automatically generates variable names from file paths following these rules:

.. list-table::
   :header-rows: 1
   :widths: 40 35 25

   * - File Path
     - Generated Variable
     - Pattern Applied
   * - ``config.yaml``
     - ``config_yaml``
     - Replace dots with underscores
   * - ``my-file.txt``
     - ``my_file_txt``
     - Replace hyphens with underscores
   * - ``hello.world.json``
     - ``hello_world_json``
     - Replace all non-alphanumeric with underscores
   * - ``123data.csv``
     - ``_123data_csv``
     - Prepend underscore if starts with digit

Auto-Naming Examples
--------------------

.. code-block:: bash

   # Auto-naming syntax
   ostruct run template.j2 schema.json -ft config.yaml
   # Creates variable: config_yaml

   ostruct run template.j2 schema.json -fc sales-data.csv
   # Creates variable: sales_data_csv

.. code-block:: jinja

   # Access in template
   Configuration settings:
   {{ config_yaml.content }}
   
   Sales data summary:
   {{ sales_data_csv.content | word_count }} characters

Custom Variable Names
---------------------

Override auto-naming with explicit variable names:

.. code-block:: bash

   # Equals syntax
   ostruct run template.j2 schema.json -ft app_config=config.yaml
   
   # Two-argument alias syntax  
   ostruct run template.j2 schema.json --fta app_config config.yaml

.. code-block:: jinja

   # Access with custom name
   Application configuration:
   {{ app_config.content }}

FileInfo Object Structure
-------------------------

Each file variable provides a ``FileInfo`` object with these attributes:

**Content and Path Information:**

.. code-block:: jinja

   {{ file.content }}        <!-- File contents as string -->
   {{ file.path }}           <!-- Relative path from base directory -->
   {{ file.abs_path }}       <!-- Absolute filesystem path -->
   {{ file.name }}           <!-- File name with extension -->

**File Properties:**

.. code-block:: jinja

   {{ file.basename }}       <!-- Name without extension -->
   {{ file.ext }}            <!-- Extension (e.g., "txt") -->
   {{ file.suffix }}         <!-- Extension with dot (e.g., ".txt") -->
   {{ file.stem }}           <!-- Name without extension -->
   {{ file.dirname }}        <!-- Parent directory name -->
   {{ file.parent }}         <!-- Parent directory path -->

**Metadata:**

.. code-block:: jinja

   {{ file.size }}           <!-- File size in bytes -->
   {{ file.mtime }}          <!-- Modification time -->
   {{ file.encoding }}       <!-- File encoding -->
   {{ file.hash }}           <!-- File hash -->

**Type Checking:**

.. code-block:: jinja

   {% if file.exists %}      <!-- File exists -->
   {% if file.is_file %}     <!-- Is a regular file -->
   {% if file.is_dir %}      <!-- Is a directory -->

Directory and Pattern Processing
---------------------------------

When processing directories or patterns, iterate over file collections:

.. code-block:: bash

   # Directory processing
   ostruct run template.j2 schema.json -dt ./config_files

.. code-block:: jinja

   Configuration files found:
   {% for file in config_files %}
   - {{ file.name }} ({{ file.size }} bytes)
     {{ file.content | truncate(100) }}
   {% endfor %}

CLI Variables
=============

String Variables
----------------

Simple string values from the ``-V`` flag:

.. code-block:: bash

   ostruct run template.j2 schema.json -V env=production -V debug=false

.. code-block:: jinja

   Environment: {{ env }}
   Debug mode: {{ debug }}
   
   {% if env == "production" %}
   Using production settings
   {% endif %}

JSON Variables  
--------------

Complex data structures from the ``-J`` flag:

.. code-block:: bash

   ostruct run template.j2 schema.json -J config='{"database":{"host":"localhost","port":5432},"features":["auth","billing"]}'

.. code-block:: jinja

   Database configuration:
   - Host: {{ config.database.host }}
   - Port: {{ config.database.port }}
   
   Enabled features:
   {% for feature in config.features %}
   - {{ feature }}
   {% endfor %}

Control Structures
==================

Conditional Logic
-----------------

.. code-block:: jinja

   {% if env == "production" %}
   **PRODUCTION ENVIRONMENT**
   {% elif env == "staging" %}
   **STAGING ENVIRONMENT**  
   {% else %}
   **DEVELOPMENT ENVIRONMENT**
   {% endif %}
   
   {% if file.size > 1000000 %}
   Warning: Large file detected ({{ file.size | filesizeformat }})
   {% endif %}

Loops and Iteration
-------------------

.. code-block:: jinja

   Processing {{ files | length }} files:
   {% for file in files %}
   {{ loop.index }}. {{ file.name }}
      - Size: {{ file.size }} bytes
      - Modified: {{ file.mtime }}
      {% if file.ext == "py" %}
      - Python file detected
      {% endif %}
   {% endfor %}

**Loop Variables:**

- ``loop.index`` - Current iteration (1-based)
- ``loop.index0`` - Current iteration (0-based) 
- ``loop.first`` - True if first iteration
- ``loop.last`` - True if last iteration
- ``loop.length`` - Total number of items

Filtering and Grouping
----------------------

.. code-block:: jinja

   Python files:
   {% for file in files if file.ext == "py" %}
   - {{ file.name }}
   {% endfor %}
   
   Files by extension:
   {% for ext, group in files | groupby('ext') %}
   {{ ext }} files:
   {% for file in group %}
     - {{ file.name }}
   {% endfor %}
   {% endfor %}

Template Filters
================

Text Processing Filters
-----------------------

**Word and Character Counting:**

.. code-block:: jinja

   Document statistics:
   - Words: {{ content | word_count }}
   - Characters: {{ content | char_count }}

**Text Cleaning and Formatting:**

.. code-block:: jinja

   Clean code (comments removed):
   {{ source_code | remove_comments }}
   
   Normalized text:
   {{ messy_text | normalize }}
   
   Wrapped text:
   {{ long_text | wrap(width=80) }}

**Content Extraction:**

.. code-block:: jinja

   Key points:
   {% for keyword in text | extract_keywords %}
   - {{ keyword }}
   {% endfor %}

Data Processing Filters
-----------------------

**JSON Handling:**

.. code-block:: jinja

   Configuration as JSON:
   {{ config | to_json }}
   
   Parsed data:
   {% set data = json_string | from_json %}
   {{ data.key }}

**List Processing:**

.. code-block:: jinja

   Sorted files:
   {% for file in files | sort_by('name') %}
   - {{ file.name }}
   {% endfor %}
   
   Unique extensions:
   {% for ext in files | extract_field('ext') | unique %}
   - {{ ext }}
   {% endfor %}

**Statistical Analysis:**

.. code-block:: jinja

   File size statistics:
   {% set stats = files | extract_field('size') | aggregate %}
   - Total files: {{ stats.count }}
   - Average size: {{ stats.avg }}
   - Largest: {{ stats.max }}
   - Smallest: {{ stats.min }}

Code Processing Filters
-----------------------

**Syntax Highlighting:**

.. code-block:: jinja

   Python code with highlighting:
   {{ python_code | format_code('python') }}
   
   Auto-detected language:
   {{ code | format_code }}

**Comment Handling:**

.. code-block:: jinja

   Code without comments:
   {{ source | strip_comments }}

Table and Data Formatting
-------------------------

**Automatic Table Generation:**

.. code-block:: jinja

   File listing:
   {{ files | auto_table }}
   
   Custom table:
   {{ data | dict_to_table }}

Global Functions
================

Token Estimation
----------------

Estimate tokens for content planning:

.. code-block:: jinja

   Content size: {{ estimate_tokens(large_text) }} tokens
   
   {% if estimate_tokens(content) > 4000 %}
   Warning: Content may exceed context limits
   {% endif %}

Utility Functions
-----------------

**Date and Time:**

.. code-block:: jinja

   Generated at: {{ now() }}

**Debugging:**

.. code-block:: jinja

   Debug info: {{ debug(complex_variable) }}
   Variable type: {{ type_of(variable) }}
   Available attributes: {{ dir_of(object) }}

**Validation:**

.. code-block:: jinja

   {% if validate_json(json_string, schema) %}
   JSON is valid
   {% else %}
   JSON validation failed
   {% endif %}

System Prompts and Frontmatter
===============================

YAML Frontmatter
-----------------

Add configuration and system prompts to templates using YAML frontmatter:

.. code-block:: jinja

   ---
   system_prompt: |
     You are an expert software architect with deep knowledge of 
     system design patterns and best practices.
   model: gpt-4o
   temperature: 0.3
   ---
   Analyze this system architecture:
   
   {{ architecture_doc.content }}

System Prompt Best Practices
-----------------------------

**Clear Role Definition:**

.. code-block:: yaml

   ---
   system_prompt: |
     You are a senior security analyst specializing in application security.
     Focus on identifying potential vulnerabilities and security best practices.
   ---

**Context-Specific Instructions:**

.. code-block:: yaml

   ---
   system_prompt: |
     You are analyzing {{ env }} environment configuration files.
     Pay attention to security settings, resource allocation, and compliance requirements.
     Provide actionable recommendations for {{ env }} deployment.
   ---

**Output Format Guidance:**

.. code-block:: yaml

   ---
   system_prompt: |
     Analyze the provided code and return findings in the exact JSON schema format specified.
     Focus on actionable feedback with specific line numbers and concrete suggestions.
   ---

Advanced Template Patterns
===========================

Multi-File Analysis Template
----------------------------

.. code-block:: jinja

   ---
   system_prompt: You are a code review expert analyzing a multi-file codebase.
   ---
   # Code Review Analysis
   
   ## Files Analyzed
   {% for file in source_files %}
   - **{{ file.name }}** ({{ file.size }} bytes, {{ file.content | word_count }} words)
   {% endfor %}
   
   ## Security Concerns
   {% for file in source_files if 'password' in file.content.lower() or 'secret' in file.content.lower() %}
   ⚠️ **{{ file.name }}**: Potential credential exposure detected
   {% endfor %}
   
   ## Code Quality Metrics
   {% set total_lines = source_files | sum(attribute='content') | word_count %}
   - Total lines across all files: {{ total_lines }}
   - Average file size: {{ (source_files | extract_field('size') | sum) // (source_files | length) }} bytes
   
   ## Detailed Analysis
   {% for file in source_files %}
   ### {{ file.name }}
   ```{{ file.ext }}
   {{ file.content }}
   ```
   {% endfor %}

Configuration Comparison Template
---------------------------------

.. code-block:: jinja

   ---
   system_prompt: You are a DevOps engineer comparing environment configurations.
   ---
   # Configuration Comparison: {{ env1 }} vs {{ env2 }}
   
   ## {{ env1 | title }} Configuration
   ```yaml
   {{ config1.content }}
   ```
   
   ## {{ env2 | title }} Configuration  
   ```yaml
   {{ config2.content }}
   ```
   
   ## Analysis Request
   Compare these configurations and identify:
   1. **Security differences** - Authentication, encryption, access controls
   2. **Resource allocation** - CPU, memory, storage differences  
   3. **Feature flags** - Enabled/disabled features
   4. **Environment-specific settings** - URLs, database connections
   5. **Potential issues** - Misconfigurations or inconsistencies

Data Analysis Template
----------------------

.. code-block:: jinja

   ---
   system_prompt: You are a data scientist analyzing business metrics.
   ---
   # Data Analysis Report
   
   ## Dataset Overview
   {% for dataset in datasets %}
   **{{ dataset.name }}**:
   - Size: {{ dataset.content | char_count }} characters
   - Estimated records: {{ dataset.content | word_count // 10 }}
   {% endfor %}
   
   ## Analysis Parameters
   - Analysis type: {{ analysis_type }}
   - Date range: {{ date_range }}
   - Metrics focus: {{ metrics.join(', ') }}
   
   ## Raw Data
   {% for dataset in datasets %}
   ### {{ dataset.name }}
   ```
   {{ dataset.content }}
   ```
   {% endfor %}
   
   Please analyze this data focusing on trends, anomalies, and business insights.

Tool Integration Variables
==========================

Code Interpreter Context
------------------------

When files are routed to Code Interpreter (``-fc``), additional context is available:

.. code-block:: jinja

   Data files available for analysis:
   {% for file in code_interpreter_files %}
   - {{ file.name }} (uploaded for Python analysis)
   {% endfor %}
   
   Please analyze the uploaded data and generate visualizations showing:
   1. Key trends over time
   2. Distribution patterns  
   3. Correlation analysis

File Search Context
-------------------

When files are routed to File Search (``-fs``), they're available for semantic search:

.. code-block:: jinja

   Knowledge base documents:
   {% for file in search_files %}
   - {{ file.name }} (available for semantic search)
   {% endfor %}
   
   Use the uploaded documents to answer questions about {{ topic }}.
   Provide specific references to source documents in your responses.

Template Organization and Reuse
===============================

Template Libraries
------------------

Organize templates by use case:

.. code-block:: text

   templates/
   ├── analysis/
   │   ├── code_review.j2
   │   ├── security_scan.j2
   │   └── performance_analysis.j2
   ├── reporting/
   │   ├── daily_summary.j2
   │   └── incident_report.j2
   └── configuration/
       ├── env_comparison.j2
       └── deployment_check.j2

Reusable Template Snippets
--------------------------

Create modular template components:

**File listing snippet:**

.. code-block:: jinja

   {# files_table.j2 #}
   {% macro file_table(files) %}
   | File | Size | Modified |
   |------|------|----------|
   {% for file in files %}
   | {{ file.name }} | {{ file.size }} | {{ file.mtime }} |
   {% endfor %}
   {% endmacro %}

**Security check snippet:**

.. code-block:: jinja

   {# security_checks.j2 #}
   {% macro security_scan(content) %}
   {% set issues = [] %}
   {% if 'password' in content.lower() %}{% set _ = issues.append('Hardcoded passwords detected') %}{% endif %}
   {% if 'api_key' in content.lower() %}{% set _ = issues.append('API keys in code') %}{% endif %}
   {% if issues %}
   ⚠️ Security Issues:
   {% for issue in issues %}
   - {{ issue }}
   {% endfor %}
   {% endif %}
   {% endmacro %}

Template Testing and Debugging
===============================

Dry Run Testing
---------------

Test templates without API calls:

.. code-block:: bash

   # Test template rendering
   ostruct run template.j2 schema.json --dry-run -ft config.yaml

   # Verbose output for debugging
   ostruct run template.j2 schema.json --dry-run --verbose -ft data.csv

Debug Variables
---------------

Use debug functions in templates:

.. code-block:: jinja

   {# Debug variable contents #}
   Debug info: {{ debug(config) }}
   
   {# Check variable types #}
   Type of data: {{ type_of(data) }}
   
   {# List available attributes #}
   Available methods: {{ dir_of(file_object) }}

Common Template Issues
----------------------

**Variable naming conflicts:**

.. code-block:: jinja

   {# Wrong - conflicts with built-in #}
   {{ list.content }}
   
   {# Right - descriptive names #}
   {{ file_list.content }}

**Missing file checks:**

.. code-block:: jinja

   {# Wrong - may fail if file missing #}
   {{ config.content }}
   
   {# Right - defensive programming #}
   {% if config and config.exists %}
   {{ config.content }}
   {% else %}
   No configuration file found
   {% endif %}

**Inefficient loops:**

.. code-block:: jinja

   {# Inefficient - nested processing #}
   {% for file in files %}
   {% for line in file.content.split('\n') %}
   Process line: {{ line }}
   {% endfor %}
   {% endfor %}
   
   {# Better - use filters #}
   {% for file in files %}
   Lines: {{ file.content | word_count }}
   {% endfor %}

Best Practices
==============

Template Design
---------------

1. **Clear structure** - Use consistent formatting and organization
2. **Defensive coding** - Check for variable existence before use
3. **Meaningful names** - Use descriptive variable names
4. **Modular design** - Break complex templates into reusable components
5. **Documentation** - Comment complex logic and requirements

Performance Optimization
------------------------

1. **Filter efficiently** - Use filters instead of loops when possible
2. **Cache expensive operations** - Store results in variables
3. **Limit content size** - Use ``truncate`` for large files
4. **Smart iteration** - Filter before iterating over large collections

Security Considerations
-----------------------

1. **Sanitize inputs** - Use ``escape`` filter for user content
2. **Validate data** - Check file existence and formats
3. **Limit exposure** - Don't include sensitive data in templates
4. **Review outputs** - Ensure templates don't leak credentials

Error Handling
--------------

.. code-block:: jinja

   {# Graceful error handling #}
   {% if files %}
   {% for file in files %}
   {% if file.exists %}
   {{ file.content }}
   {% else %}
   File not found: {{ file.path }}
   {% endif %}
   {% endfor %}
   {% else %}
   No files provided for analysis
   {% endif %}

Next Steps
==========

- :doc:`quickstart` - Learn with hands-on examples
- :doc:`cli_reference` - Complete CLI option reference  
- :doc:`../security/overview` - Security considerations for templates
- `Jinja2 Documentation <https://jinja.palletsprojects.com/>`_ - Advanced Jinja2 features