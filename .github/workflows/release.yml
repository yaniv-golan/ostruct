name: Create Release and Build Binaries

on:
  push:
    tags:
      - 'v*'
      - 'v*-rc*'  # Add RC tag support

permissions:
  contents: write

jobs:
  build_package:
    name: Build Python Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          pip install poetry

      - name: Build sdist and wheel
        run: poetry build

      - name: Upload package artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/*

  build_binaries:
    name: Build binaries for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install .

      - name: Build binary
        run: pyinstaller pyinstaller.spec
      - name: List dist directory (debug)
        run: ls -l dist
        shell: bash
      - name: Rename output directory for Windows
        if: runner.os == 'Windows'
        run: mv dist/ostruct dist/ostruct-windows-amd64
        shell: bash
      - name: Rename output directory for macOS
        if: runner.os == 'macOS'
        run: mv dist/ostruct dist/ostruct-macos-amd64
        shell: bash
      - name: Rename output directory for Linux
        if: runner.os == 'Linux'
        run: mv dist/ostruct dist/ostruct-linux-amd64
        shell: bash
      - name: Zip binary folder (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          cd dist
          zip -r ostruct-${{ matrix.os }}.zip ostruct-*
      - name: Zip binary folder (Windows)
        if: runner.os == 'Windows'
        run: |
          Compress-Archive -Path dist\ostruct-windows-amd64 -DestinationPath dist\ostruct-windows-latest.zip
        shell: pwsh
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ostruct-bundle-${{ matrix.os }}
          path: dist/ostruct-${{ matrix.os }}.zip

  create_release:
    name: Create GitHub Release
    needs: [build_package, build_binaries]
    runs-on: ubuntu-latest
    steps:
      - name: Get tag
        id: get_tag
        run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: ostruct-bundle-ubuntu-latest
          path: dist/binaries/linux

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: ostruct-bundle-macos-latest
          path: dist/binaries/macos

      - name: Download Windows artifact
        uses: actions/download-artifact@v4
        with:
          name: ostruct-bundle-windows-latest
          path: dist/binaries/windows

      - name: Download Python package artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/packages

      - name: List downloaded files
        run: ls -lR dist

      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.TAG }}
          name: Release ${{ env.TAG }}
          draft: false
          prerelease: false
          files: |
            dist/binaries/linux/ostruct-ubuntu-latest.zip
            dist/binaries/macos/ostruct-macos-latest.zip
            dist/binaries/windows/ostruct-windows-latest.zip
            dist/packages/*.whl
            dist/packages/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish_to_testpypi:
    name: Publish to TestPyPI (RC only)
    needs: build_package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && contains(github.ref, '-rc')
    environment:
      name: pypi
      url: https://test.pypi.org/p/ostruct-cli
    permissions:
      id-token: write # required for trusted publishing
    steps:
      - name: Download python-package artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          password: ${{ secrets.TESTPYPI_API_TOKEN }}

  publish_to_pypi:
    name: Publish to PyPI (Production only)
    needs: build_package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags') && !contains(github.ref, '-rc')
    environment:
      name: pypi
      url: https://pypi.org/p/ostruct-cli
    permissions:
      id-token: write # required for trusted publishing
    steps:
      - name: Download python-package artifact
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  build_and_push_docker:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    needs: create_release
    permissions:
      contents: read # To checkout private repository
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag
        id: get_tag
        run: echo "TAG=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          build-args: |
            VERSION=${{ env.TAG }}
          tags: |
            ghcr.io/${{ github.repository }}:${{ env.TAG }}
            ghcr.io/${{ github.repository }}:latest

  update_homebrew_formula:
    name: Update Homebrew Formula
    needs: create_release
    runs-on: macos-latest
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v3
        with:
          ref: main
          # Use a personal access token with write permissions
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          pip install poetry

      - name: Set Release Version
        id: get_version
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Update pyproject.toml and poetry.lock
        run: |
          poetry version ${{ env.RELEASE_VERSION }}
        # This will update pyproject.toml and poetry.lock with the new version

      - name: Download release tarball
        run: |
          VERSION="${{ env.RELEASE_VERSION }}"
          curl -sL "https://github.com/${{ github.repository }}/archive/refs/tags/v$VERSION.tar.gz" -o "ostruct-v$VERSION.tar.gz"

      - name: Calculate SHA256
        id: shasum
        run: |
          echo "sha256=$(shasum -a 256 "ostruct-v${{ env.RELEASE_VERSION }}.tar.gz" | awk '{print $1}')" >> $GITHUB_ENV

      - name: Update Homebrew Formula
        run: |
          VERSION="${{ env.RELEASE_VERSION }}"
          SHA256="${{ env.sha256 }}"
          sed -i.bak -E "s/version \"[0-9.]+\"/version \"$VERSION\"/" Formula/ostruct-cli.rb
          sed -i.bak -E "s/sha256 \"[a-f0-9]{64}\"/sha256 \"$SHA256\"/" Formula/ostruct-cli.rb
          echo "Updated formula to version $VERSION with SHA256 $SHA256"
          cat Formula/ostruct-cli.rb

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add Formula/ostruct-cli.rb pyproject.toml poetry.lock
          git commit -m "chore(release): update Homebrew formula for v${{ env.RELEASE_VERSION }}"
          git push origin main
