name: CI

on:
  push:
    branches: [main, 'release/*']
  pull_request:
    branches: [main, 'release/*']

jobs:
  test:
    runs-on: ubuntu-latest
    # Uncomment additional OS for comprehensive testing:
    # runs-on: ${{ matrix.os }}
    env:
      # Disable rich-click colors for consistent test output and clean diffs
      RICH_NO_COLOR: 1
      NO_COLOR: 1
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
        # Uncomment for multi-OS testing:
        # os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create false
    - name: Install dependencies
      run: |
        poetry install --no-interaction --with dev --extras "docs examples"
    - name: Verify environment versions
      run: |
        echo "=== Environment Version Report ==="
        echo "Python: $(python --version)"
        echo "Poetry: $(poetry --version)"
        echo "MyPy: $(poetry run mypy --version)"
        echo "Black: $(poetry run black --version)"
        echo "Ruff: $(poetry run ruff --version)"
        echo "Pre-commit: $(poetry run pre-commit --version)"
        echo "Pytest: $(poetry run pytest --version)"
        echo "================================="
    - name: Run pre-commit
      run: |
        poetry run pre-commit run --all-files -v
    - name: Run type checking with MyPy
      run: |
        poetry run mypy --package ostruct
        # Note: Test type checking temporarily disabled due to existing type issues
        # poetry run mypy tests
    - name: Run tests with pytest
      run: |
        # Run all tests except live tests, with verbose output and logging
        poetry run pytest -m "not live" -vv -s --log-cli-level=DEBUG
    - name: Test CLI help and basic commands
      run: |
        # Test that basic CLI commands work
        poetry run ostruct --help
        poetry run ostruct --version || echo "Version command may not be implemented"
        # Test dry-run functionality
        echo '{"type": "object", "properties": {"message": {"type": "string"}}, "required": ["message"]}' > test_schema.json
        echo 'Test: {{ "hello" }}' > test_template.j2
        poetry run ostruct run test_template.j2 test_schema.json --dry-run
    - name: Build docs (HTML+linkcheck)
      run: |
        cd docs
        echo "Building documentation with warnings treated as errors..."
        poetry run sphinx-build -W -b html source build/html
        echo "Checking for broken links..."
        poetry run sphinx-build -b linkcheck source build/linkcheck
        echo "Documentation build completed successfully!"
