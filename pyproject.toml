    [build-system]
    requires = ["poetry-core"]
    build-backend = "poetry.core.masonry.api"

    [tool.poetry]
    name = "ostruct-cli"
    version = "0.6.2"
    description = "CLI for OpenAI Structured Output"
    authors = ["Yaniv Golan <yaniv@golan.name>"]
    readme = "README.md"
    packages = [{include = "ostruct", from = "src"}]
    include = ["py.typed"]

    [tool.poetry.dependencies]
    python = ">=3.10,<4.0"
    pydantic = "^2.6.3"
    jsonschema = "^4.23.0"
    chardet = "^5.0.0"
    cachetools = "^5.3.2"
    ijson = "^3.2.3"
    typing-extensions = "^4.9.0"
    pyyaml = "^6.0.2"
    tomli = {version = "^2.0.1", python = "<3.11"}
    click = "^8.1.7"
    werkzeug = "^3.1.3"
    openai = "^1.0.0"
    openai-structured = "^2.0.0"
    tiktoken = "0.9.0"

    [tool.poetry.scripts]
    ostruct = "ostruct.cli.cli:main"

    [tool.poetry.group.dev.dependencies]
    pytest = "^8.3.4"
    flake8 = "^6.0"
    flake8-pyproject = "^1.2.3"
    black = "24.8.0"
    isort = "^5.13"
    mypy = "^1.0"
    pytest-asyncio = "^0.25.2"
    pytest-mock = "^3.14.0"
    build = "^1.2.2.post1"
    twine = "^6.0.1"
    python-dotenv = "^1.0.1"
    types-jsonschema = "^4.23.0.20241208"
    anyio = {version = "3.7.1", extras = ["trio"]}
    sphinx = ">=7.0,<8.0"
    types-pyyaml = "^6.0.12.20241230"
    types-pygments = "^2.19.0.20250107"
    types-chardet = "^5.0.4.6"
    pyfakefs = "^5.7.4"
    types-cachetools = "^5.5.0.20240820"
    types-click = "^7.1.8"
    types-requests = "^2.32.0.20241016"
    pre-commit = "^4.1.0"

    [tool.poetry.group.docs]
    optional = true

    [tool.poetry.group.docs.dependencies]
    sphinx = "^7.0"
    sphinx-rtd-theme = "^1.0"
    myst-parser = "^2.0.0"
    tomli = {version = "^2.0.1", python = "<3.11"}

    [tool.flake8]
    max-line-length = 120
    extend-ignore = ["E203"]

    [tool.mypy]
    plugins = ["pydantic.mypy"]
    python_version = "3.10"
    warn_unused_configs = true
    exclude = ["docs/*", "examples/*"]
    disallow_untyped_defs = false
    check_untyped_defs = true
    warn_return_any = false
    warn_unused_ignores = false
    show_error_codes = true

    # Stricter settings for source code
    [[tool.mypy.overrides]]
    module = "ostruct.*"
    disallow_untyped_defs = true
    warn_return_any = true
    warn_unused_ignores = true

    # Special handling for Click-related code
    [[tool.mypy.overrides]]
    module = ["click.*", "ostruct.cli.click_options"]
    disallow_untyped_decorators = false
    warn_return_any = false

    [tool.black]
    line-length = 79
    target-version = ["py310"]
    include = '\.pyi?$'
    preview = false
    required-version = "24.8.0"

    [tool.isort]
    profile = "black"
    multi_line_output = 3
    line_length = 79

    [tool.pytest.ini_options]
    asyncio_mode = "strict"
    testpaths = ["tests"]
    python_files = ["test_*.py"]
    markers = [
        "live: mark test as a live test that should use real API key",
        "asyncio: mark test as requiring async loop",
        "no_pyfakefs: mark test to disable pyfakefs"
    ]
    asyncio_default_fixture_loop_scope = "function"

    [tool.ruff]
    target-version = "py310"

    [tool.poetry.group.examples]
    optional = true

    [tool.poetry.group.examples.dependencies]
    tenacity = "^8.2.3"
    asyncio-throttle = "^1.0.2"
