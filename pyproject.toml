[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning>=1.0.0,<2.0.0"]
build-backend = "poetry_dynamic_versioning.backend"

[project]
# Use dynamic version from git tags
name = "ostruct-cli"
dynamic = ["version"]
description = "CLI for OpenAI Structured Output with Multi-Tool Integration"
authors = [{name = "Yaniv Golan", email = "yaniv@golan.name"}]
readme = "README.md"
requires-python = ">=3.10,<4.0"
dependencies = [
    "pydantic>=2.6.3,<3.0",
    "jsonschema>=4.23.0,<5.0",
    "chardet>=5.0.0,<6.0",
    "cachetools>=5.3.2,<6.0",
    "ijson>=3.2.3,<4.0",
    "typing-extensions>=4.9.0,<5.0",
    "pyyaml>=6.0.2,<7.0",
    "tomli>=2.0.1,<3.0;python_version<'3.11'",
    "click>=8.2.1,<9.0",
    "werkzeug>=3.1.3,<4.0",
    "openai==1.81.0",
    "tiktoken==0.9.0",
    "pygments>=2.15.0,<3.0",
    "jinja2>=3.1.2,<4.0",
    "openai-model-registry>=0.7.0,<1.0",
    "python-dotenv>=1.0.1,<2.0",
    "bleach>=6.0.0,<7.0",
    "myst-parser>=4.0.1,<5.0",
    "sphinx-design>=0.6.1,<1.0",
    "rich-click>=1.8.9,<2.0.0",
    "rich>=13.0.0,<14.0.0",
    "pathspec>=0.12.1,<0.13.0",
    "tabulate (>=0.9.0,<0.10.0)",
    "questionary>=2.0.0,<3.0.0",
]

[project.scripts]
ostruct = "ostruct.cli.cli:main"

[project.optional-dependencies]
docs = [
    # Repeat key docs deps here so environments that rely on the "docs" extra
    # (e.g. Read the Docs) still install them, even if they are already in
    # the core dependencies list.
    "myst-parser>=4.0.1,<5.0",
    "sphinx-design>=0.6.1,<1.0",
    "sphinx-rtd-theme>=3.0,<4.0",
    "sphinx>=7.0.0,<9.0",
    "tomli>=2.0.1,<3.0;python_version<'3.11'",
]
examples = [
    "tenacity>=8.2.3,<9.0",
    "asyncio-throttle>=1.0.2,<2.0",
]
enhanced-detection = [
    "magika>=0.5.0,<1.0",
]

[tool.poetry]
name = "ostruct-cli"
version = "1.5.0-rc1"  # Placeholder, will be overridden by dynamic versioning
description = "CLI for OpenAI Structured Output with Multi-Tool Integration"
authors = ["Yaniv Golan <yaniv@golan.name>"]
readme = "README.md"
packages = [{include = "ostruct", from = "src"}]
include = ["py.typed"]

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- elif revision is not none -%}
        {{ serialize_pep440(base, stage, revision + 1, dev=distance) }}
    {%- else -%}
        {{ serialize_pep440(bump_version(base), dev=distance) }}
    {%- endif -%}
"""

[tool.poetry.group.dev.dependencies]
pytest = ">=8.3.4,<9.0"
pytest-rerunfailures = ">=12.0,<13.0"
flake8 = ">=6.0,<7.0"
flake8-pyproject = ">=1.2.3,<2.0"
black = "==24.8.0"
mypy = "==1.17.0"
pytest-asyncio = ">=0.25.2,<2.0"
pytest-mock = ">=3.14.0,<4.0"
build = ">=1.2.2.post1,<2.0"
twine = ">=6.0.1,<7.0"
python-dotenv = ">=1.0.1,<2.0"
types-jsonschema = ">=4.23.0.20241208"
anyio = {version = "==3.7.1", extras = ["trio"]}
sphinx = ">=7.0.0,<9.0"
types-pyyaml = ">=6.0.12.20241230"
types-pygments = ">=2.19.0.20250107"
types-chardet = ">=5.0.4.6"
pyfakefs = ">=5.7.4,<6.0"
types-cachetools = ">=5.5.0.20240820"
types-click = ">=7.1.8,<8.0"
types-requests = ">=2.32.0.20241016"
pre-commit = ">=4.1.0,<5.0"
psutil = ">=7.0.0,<8.0"
tomli = ">=2.0.1,<3.0"
types-bleach = ">=6.0.0,<7.0.0"
types-psutil = ">=7.0.0,<8.0.0"
hypothesis = "^6.135.4"
pyinstaller = "^6.13"
sphinx-rtd-theme = ">=3.0,<4.0"
types-tabulate = "^0.9.0.20241207"

[tool.flake8]
max-line-length = 120
extend-ignore = ["E203"]
per-file-ignores = [
    # generated or help files with unavoidable long lines
    "src/ostruct/cli/*.py:E501",
    "tests/*.py:E501",
]

[tool.mypy]
plugins = ["pydantic.mypy"]
python_version = "3.10"
mypy_path = "src"
warn_unused_configs = true
exclude = ["docs/*", "examples/*", "temp_verify/*"]
explicit_package_bases = true
namespace_packages = true
disallow_untyped_defs = false
check_untyped_defs = true
warn_return_any = false
warn_unused_ignores = false
show_error_codes = true

[[tool.mypy.overrides]]
module = ["openai_model_registry.*", "hypothesis", "magika", "magika.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["rich", "rich.*", "rich_click", "rich_click.*"]
ignore_missing_imports = true

# Stricter settings for source code
[[tool.mypy.overrides]]
module = "ostruct.*"
disallow_untyped_defs = true
warn_return_any = true
warn_unused_ignores = true

# Special handling for Click-related code
[[tool.mypy.overrides]]
module = ["click.*", "ostruct.cli.click_options"]
disallow_untyped_decorators = false
warn_return_any = false

[[tool.mypy.overrides]]
module = ["bleach", "bleach.*"]
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = ["ostruct.cli.mcp_integration"]
warn_unused_ignores = false

[tool.black]
line-length = 79
target-version = ["py310"]
include = '.pyi?$'
preview = false
required-version = "24.8.0"

[tool.pytest.ini_options]
asyncio_mode = "strict"
testpaths = ["tests"]
python_files = ["test_*.py"]
markers = [
    "live: mark test as a live test that makes real API calls or runs actual ostruct commands",
    "asyncio: mark test as requiring async loop",
    "no_fs: mark test to disable pyfakefs and use real filesystem",
    "slow: mark test as slow performance/stress test",
    "flaky: mark test as flaky (may need reruns)",
    "mock_openai: mark test to use mock OpenAI client"
]
asyncio_default_fixture_loop_scope = "function"
# By default, skip live tests unless explicitly requested
addopts = "-m 'not live'"

[tool.ruff]
target-version = "py310"
fix = true
line-length = 79  # Match Black's setting

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort (import sorting)
]
ignore = [
    "E501",  # Line too long (handled by Black)
]

[tool.ruff.lint.isort]
# Black-compatible settings
force-single-line = false
combine-as-imports = true
split-on-trailing-comma = true

[tool.poetry.dependencies]
python = ">=3.10,<3.14"
rich-click = ">=1.8.9,<2.0.0"
distlib = ">=0.3.9,<1.0.0"
